{
  "openapi": "3.0.0",
  "info": {
    "description": "\nRetrieves Aladdin security master data—including historical time series data (coupons, factors, and ratings)—for one or more securities. \n\n# Description\n\nA security is a financial instrument that holds some type of value. The Securities API retrieves current indicative security master and time-series historical data for one or more identifier. When asset ids are provided, one result will be returned for each asset found. When external public or private identifiers are provided, multiple records may be returned if the identifier does not uniquely identify a single asset. For historical time series data, approximately 13 months of available data will be returuned for each located asset.\n\n## Example Use Case\n\n  The Securities API could be used if a client receives an order with an unknown security, and they need to know the terms and conditions intraday. Clients can further use the Coupons, Factors, and Ratings APIs to obtain Historical Time Series data if needed.\n\n## Implementation Status\n\nThis API is production ready. For information on versioning, please see the [Developer Guide].\n\n  [Developer Guide]: apps/aladdin-developer-portal/#/guides/developer-guide\n",
    "title": "Securities",
    "version": "1.0.0"
  },
  "paths": {
    "/coupons": {
      "get": {
        "description": "Retrieve historical coupon rates for one or more floating-rate securities",
        "operationId": "getCoupons",
        "parameters": [
          {
            "description": "Comma-separated asset ids, e.g. `00037NKV7,BRSJ315T5`.",
            "in": "query",
            "name": "assetId",
            "required": true,
            "example": "BRS059VD3",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp assigned to this request at origin, expressed as an ISO 8601/RFC3339 UTC date-time (YYYY-MM-DDThh:mm:ss.SSSZ) or an RFC7231 HTTP-date format (E, d M YYYY hh:mm:ss GMT)",
            "in": "header",
            "name": "VND.com.blackrock.Origin-Timestamp",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for this request.",
            "in": "header",
            "name": "VND.com.blackrock.Request-ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon response object if request is successful.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in \"HTTP-date\" format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponData"
                }
              }
            }
          },
          "400": {
            "description": "Aladdin® will not process the request due to an apparent client error.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Aladdin® will not process the request as the necessary credentials were not provided or were invalid.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "403": {
            "description": "Aladdin® understood the request but is refusing to authorize it.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "404": {
            "description": "Aladdin® did not find the resource requested or is unwilling to disclose if it exists. Could indicate a defect in the client program or data which is no longer accessible.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "summary": "Retrieve coupon rates",
        "tags": [
          "Historical Time-Series Data"
        ],
        "x-access-type": "READ",
        "x-quota-limit": 500
      }
    },
    "/factors": {
      "get": {
        "description": "Retrieve factors for one or more securities that amortize their principal over time or that apply an inflation factor",
        "operationId": "getFactors",
        "parameters": [
          {
            "description": "Comma-separated asset ids, e.g. `00037NKV7,BRSJ315T5`.",
            "in": "query",
            "name": "assetId",
            "required": true,
            "example": "BRS059VD3",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp assigned to this request at origin, expressed as an ISO 8601/RFC3339 UTC date-time (YYYY-MM-DDThh:mm:ss.SSSZ) or an RFC7231 HTTP-date format (E, d M YYYY hh:mm:ss GMT)",
            "in": "header",
            "name": "VND.com.blackrock.Origin-Timestamp",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for this request.",
            "in": "header",
            "name": "VND.com.blackrock.Request-ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Factors data response object if request is successful.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in \"HTTP-date\" format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FactorData"
                }
              }
            }
          },
          "400": {
            "description": "Aladdin® will not process the request due to an apparent client error.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Aladdin® will not process the request as the necessary credentials were not provided or were invalid.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "403": {
            "description": "Aladdin® understood the request but is refusing to authorize it.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "404": {
            "description": "Aladdin® did not find the resource requested or is unwilling to disclose if it exists. Could indicate a defect in the client program or data which is no longer accessible.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "summary": "Retrieve factors",
        "tags": [
          "Historical Time-Series Data"
        ],
        "x-access-type": "READ",
        "x-quota-limit": 500
      }
    },
    "/ratings": {
      "get": {
        "description": "Retrieve a standard set of ratings for one or more Aladdin® IDs; each ID can be either an issuer or an asset",
        "operationId": "getRatings",
        "parameters": [
          {
            "description": "Comma-separated asset ids, e.g. `00037NKV7,BRSJ315T5`.",
            "in": "query",
            "name": "assetId",
            "required": true,
            "example": "BRS059VD3",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp assigned to this request at origin, expressed as an ISO 8601/RFC3339 UTC date-time (YYYY-MM-DDThh:mm:ss.SSSZ) or an RFC7231 HTTP-date format (E, d M YYYY hh:mm:ss GMT)",
            "in": "header",
            "name": "VND.com.blackrock.Origin-Timestamp",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for this request.",
            "in": "header",
            "name": "VND.com.blackrock.Request-ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security rating response object if request is successful.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in \"HTTP-date\" format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityRatingData"
                }
              }
            }
          },
          "400": {
            "description": "Aladdin® will not process the request due to an apparent client error.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Aladdin® will not process the request as the necessary credentials were not provided or were invalid.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "403": {
            "description": "Aladdin® understood the request but is refusing to authorize it.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "404": {
            "description": "Aladdin® did not find the resource requested or is unwilling to disclose if it exists. Could indicate a defect in the client program or data which is no longer accessible.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "summary": "Retrieve ratings",
        "tags": [
          "Historical Time-Series Data"
        ],
        "x-access-type": "READ",
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "String ratingId = \"00038WAN5\";\nRatings response = api.getRatings(ratingId);\n"
          }
        ],
        "x-quota-limit": 500
      }
    },
    "/security-master": {
      "get": {
        "description": "",
        "operationId": "getSecurityData",
        "parameters": [
          {
            "description": "Comma-separated asset ids, e.g. `00037NKV7,BRSJ315T5`.",
            "in": "query",
            "name": "assetId",
            "required": true,
            "example": "BRS059VD3",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Asset id type: ISIN|SEDOL|CUSIP|ALADDIN_SEC_ID|CINS|RIC|LOANX_ID|LIN ",
            "in": "query",
            "name": "assetIdType",
            "required": false,
            "example": "CUSIP",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp assigned to this request at origin, expressed as an ISO 8601/RFC3339 UTC date-time (YYYY-MM-DDThh:mm:ss.SSSZ) or an RFC7231 HTTP-date format (E, d M YYYY hh:mm:ss GMT)",
            "in": "header",
            "name": "VND.com.blackrock.Origin-Timestamp",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for this request.",
            "in": "header",
            "name": "VND.com.blackrock.Request-ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security Master response object if request is successful.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in \"HTTP-date\" format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecMasterData"
                }
              }
            }
          },
          "400": {
            "description": "Aladdin® will not process the request due to an apparent client error.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Aladdin® will not process the request as the necessary credentials were not provided or were invalid.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "403": {
            "description": "Aladdin® understood the request but is refusing to authorize it.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          },
          "404": {
            "description": "Aladdin® did not find the resource requested or is unwilling to disclose if it exists. Could indicate a defect in the client program or data which is no longer accessible.",
            "headers": {
              "VND.com.blackrock.Request-ID": {
                "description": "The unique identifier assigned by the client to the request that originated this response.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-ID": {
                "description": "A Unique Identifier for this response",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              },
              "VND.com.blackrock.Response-Timestamp": {
                "description": "Timestamp assigned to this response, in “HTTP-date” format as defined by RFC 7231.",
                "schema": {
                  "type": "string",
                  "format": "UUID"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "summary": "Retreive security master data",
        "tags": [
          "Security Master Data"
        ],
        "x-access-type": "READ",
        "x-code-samples": [
          {
            "lang": "Java",
            "source": "String smId = \"00038WAN5\";\nSM response = api.getSecurityData(smId);\n"
          }
        ],
        "x-quota-limit": 500
      }
    }
  },
  "x-access-level": "Public",
  "x-application-id": "18543",
  "servers": [
    {
      "url": "https://lmginv.blackrock.com/api/reference-data/securities/v1"
    }
  ],
  "components": {
    "schemas": {
      "AmortRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/AmortRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "balance": {
            "$ref": "#/components/schemas/balance"
          },
          "dt": {
            "$ref": "#/components/schemas/dt"
          },
          "interest": {
            "$ref": "#/components/schemas/interest"
          },
          "principal": {
            "$ref": "#/components/schemas/principal"
          }
        },
        "required": [
          "dt",
          "principal"
        ],
        "type": "object"
      },
      "AssetRecord": {
        "description": "Asset Record Entity",
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/AssetRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "accrualDt": {
            "$ref": "#/components/schemas/accrualDt"
          },
          "accrualPeriod": {
            "$ref": "#/components/schemas/accrualPeriod"
          },
          "accrualStartEnd": {
            "$ref": "#/components/schemas/accrualStartEnd"
          },
          "agency": {
            "$ref": "#/components/schemas/agency"
          },
          "aggregateCode": {
            "$ref": "#/components/schemas/aggregateCode"
          },
          "agreedDiscRt": {
            "$ref": "#/components/schemas/agreedDiscRt"
          },
          "amortSet": {
            "properties": {
              "amortRecord": {
                "items": {
                  "$ref": "#/components/schemas/AmortRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "amortRecord"
            ],
            "type": "object"
          },
          "amt": {
            "$ref": "#/components/schemas/amt"
          },
          "amtIsu": {
            "$ref": "#/components/schemas/amtIsu"
          },
          "annexDt": {
            "$ref": "#/components/schemas/annexDt"
          },
          "announceDt": {
            "$ref": "#/components/schemas/announceDt"
          },
          "assetBenchmark": {
            "$ref": "#/components/schemas/assetBenchmark"
          },
          "assetStatus": {
            "$ref": "#/components/schemas/assetStatus"
          },
          "assetStatusType": {
            "$ref": "#/components/schemas/assetStatusType"
          },
          "attachment": {
            "$ref": "#/components/schemas/attachment"
          },
          "attachments": {
            "$ref": "#/components/schemas/attachments"
          },
          "balloon": {
            "$ref": "#/components/schemas/balloon"
          },
          "barrierEnd": {
            "$ref": "#/components/schemas/barrierEnd"
          },
          "barrierEvent": {
            "$ref": "#/components/schemas/barrierEvent"
          },
          "barrierLower": {
            "$ref": "#/components/schemas/barrierLower"
          },
          "barrierSource": {
            "$ref": "#/components/schemas/barrierSource"
          },
          "barrierStart": {
            "$ref": "#/components/schemas/barrierStart"
          },
          "barrierUpper": {
            "$ref": "#/components/schemas/barrierUpper"
          },
          "baseLeg": {
            "$ref": "#/components/schemas/baseLeg"
          },
          "basketCusip": {
            "$ref": "#/components/schemas/basketCusip"
          },
          "bondtype": {
            "$ref": "#/components/schemas/bondtype"
          },
          "calcType": {
            "$ref": "#/components/schemas/calcType"
          },
          "callMandatory": {
            "$ref": "#/components/schemas/callMandatory"
          },
          "callType": {
            "$ref": "#/components/schemas/callType"
          },
          "capitalType": {
            "$ref": "#/components/schemas/capitalType"
          },
          "cashPmtDate": {
            "$ref": "#/components/schemas/cashPmtDate"
          },
          "cashQuotation": {
            "$ref": "#/components/schemas/cashQuotation"
          },
          "cdInstmtType": {
            "$ref": "#/components/schemas/cdInstmtType"
          },
          "cdsType": {
            "$ref": "#/components/schemas/cdsType"
          },
          "ceSet": {
            "properties": {
              "ceRecord": {
                "items": {
                  "$ref": "#/components/schemas/CreditEnhancementRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "ceRecord"
            ],
            "type": "object"
          },
          "changeDt": {
            "$ref": "#/components/schemas/changeDt"
          },
          "city": {
            "$ref": "#/components/schemas/city"
          },
          "cleanUpPct": {
            "$ref": "#/components/schemas/cleanUpPct"
          },
          "clearingOrg": {
            "$ref": "#/components/schemas/clearingOrg"
          },
          "collateral": {
            "$ref": "#/components/schemas/collateral"
          },
          "componentSet": {
            "properties": {
              "componentRecord": {
                "items": {
                  "$ref": "#/components/schemas/ComponentRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "componentRecord"
            ],
            "type": "object"
          },
          "compoundFlag": {
            "$ref": "#/components/schemas/compoundFlag"
          },
          "conduit": {
            "$ref": "#/components/schemas/conduit"
          },
          "contractMonth": {
            "$ref": "#/components/schemas/contractMonth"
          },
          "contractPointValue": {
            "$ref": "#/components/schemas/contractPointValue"
          },
          "contractSize": {
            "$ref": "#/components/schemas/contractSize"
          },
          "contractTickerPfx": {
            "$ref": "#/components/schemas/contractTickerPfx"
          },
          "contractYear": {
            "$ref": "#/components/schemas/contractYear"
          },
          "contractualRecovery": {
            "$ref": "#/components/schemas/contractualRecovery"
          },
          "conversionSet": {
            "properties": {
              "conversionRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConversionRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "conversionRecord"
            ],
            "type": "object"
          },
          "convertCmplxRedemptSet": {
            "properties": {
              "convertCmplxRedemptRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertCmplxRedemptRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertCmplxRedemptRecord"
            ],
            "type": "object"
          },
          "convertContgSchedSet": {
            "properties": {
              "convertContgSchedRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertContgSchedRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertContgSchedRecord"
            ],
            "type": "object"
          },
          "convertContingentSet": {
            "properties": {
              "convertContingentRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertContingentRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertContingentRecord"
            ],
            "type": "object"
          },
          "convertDefSet": {
            "properties": {
              "convertDefRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertDefRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertDefRecord"
            ],
            "type": "object"
          },
          "convertDivProtectSet": {
            "properties": {
              "convertDivProtectRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertDivProtectRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertDivProtectRecord"
            ],
            "type": "object"
          },
          "convertEnd": {
            "$ref": "#/components/schemas/convertEnd"
          },
          "convertHurdleSet": {
            "properties": {
              "convertHurdleRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertHurdleRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertHurdleRecord"
            ],
            "type": "object"
          },
          "convertInstFeatSet": {
            "properties": {
              "convertInstFeatRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertInstFeatRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertInstFeatRecord"
            ],
            "type": "object"
          },
          "convertMakeWholeSet": {
            "properties": {
              "convertMakeWholeRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertMakeWholeRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertMakeWholeRecord"
            ],
            "type": "object"
          },
          "convertMandatorySet": {
            "properties": {
              "convertMandatoryRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertMandatoryRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertMandatoryRecord"
            ],
            "type": "object"
          },
          "convertSchedSet": {
            "properties": {
              "convertSchedRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertSchedRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertSchedRecord"
            ],
            "type": "object"
          },
          "convertStart": {
            "$ref": "#/components/schemas/convertStart"
          },
          "convertTermsSet": {
            "properties": {
              "convertTermsRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertTermsRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertTermsRecord"
            ],
            "type": "object"
          },
          "convertUnrealisedSet": {
            "properties": {
              "convertUnrealisedRecord": {
                "items": {
                  "$ref": "#/components/schemas/ConvertUnrealisedRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "convertUnrealisedRecord"
            ],
            "type": "object"
          },
          "convertibleFlag": {
            "$ref": "#/components/schemas/convertibleFlag"
          },
          "country": {
            "$ref": "#/components/schemas/country"
          },
          "countryClassificationSet": {
            "properties": {
              "countryClassificationRecord": {
                "items": {
                  "$ref": "#/components/schemas/CountryClassificationRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "countryClassificationRecord"
            ],
            "type": "object"
          },
          "coupFreq": {
            "$ref": "#/components/schemas/assetStatusType"
          },
          "coupon": {
            "$ref": "#/components/schemas/coupon"
          },
          "couponFix": {
            "$ref": "#/components/schemas/assetStatusType"
          },
          "couponFloat": {
            "$ref": "#/components/schemas/couponFloat"
          },
          "covenantType": {
            "$ref": "#/components/schemas/covenantType"
          },
          "covenants": {
            "$ref": "#/components/schemas/covenants"
          },
          "cpnType": {
            "$ref": "#/components/schemas/cpnType"
          },
          "creditEnhanceFee": {
            "$ref": "#/components/schemas/creditEnhanceFee"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "cusip": {
            "$ref": "#/components/schemas/assetId"
          },
          "cusip2Set": {
            "properties": {
              "cusip2Record": {
                "items": {
                  "$ref": "#/components/schemas/Cusip2Record"
                },
                "type": "array"
              }
            },
            "required": [
              "cusip2Record"
            ],
            "type": "object"
          },
          "cusipAliasSet": {
            "properties": {
              "cusipAliasRecord": {
                "items": {
                  "$ref": "#/components/schemas/CusipAliasRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "cusipAliasRecord"
            ],
            "type": "object"
          },
          "cusipLogSet": {
            "properties": {
              "cusipLogRecord": {
                "items": {
                  "$ref": "#/components/schemas/CusipLogRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "cusipLogRecord"
            ],
            "type": "object"
          },
          "cusipPay": {
            "$ref": "#/components/schemas/cusipPay"
          },
          "cusipReceive": {
            "$ref": "#/components/schemas/cusipReceive"
          },
          "cusipSwapAmort": {
            "$ref": "#/components/schemas/cusipSwapAmort"
          },
          "cusipType": {
            "$ref": "#/components/schemas/cusipType"
          },
          "custodianFee": {
            "$ref": "#/components/schemas/custodianFee"
          },
          "dateConv": {
            "$ref": "#/components/schemas/dateConv"
          },
          "daysToReg144a": {
            "$ref": "#/components/schemas/daysToReg144a"
          },
          "deal": {
            "$ref": "#/components/schemas/deal"
          },
          "dealAmount": {
            "$ref": "#/components/schemas/dealAmount"
          },
          "decliningPrem": {
            "$ref": "#/components/schemas/decliningPrem"
          },
          "defeasanceLockoutTerm": {
            "$ref": "#/components/schemas/defeasanceLockoutTerm"
          },
          "delay": {
            "$ref": "#/components/schemas/delay"
          },
          "delayConv": {
            "$ref": "#/components/schemas/delayConv"
          },
          "deliveryDate": {
            "$ref": "#/components/schemas/deliveryDate"
          },
          "deliveryMethod": {
            "$ref": "#/components/schemas/deliveryMethod"
          },
          "descInstmt": {
            "$ref": "#/components/schemas/descInstmt"
          },
          "descInstmt2": {
            "$ref": "#/components/schemas/descInstmt2"
          },
          "detachment": {
            "$ref": "#/components/schemas/detachment"
          },
          "dfltThreshold": {
            "$ref": "#/components/schemas/dfltThreshold"
          },
          "dilutionProtection": {
            "$ref": "#/components/schemas/dilutionProtection"
          },
          "disputeResolution": {
            "$ref": "#/components/schemas/disputeResolution"
          },
          "divCcy": {
            "$ref": "#/components/schemas/divCcy"
          },
          "divFraction": {
            "$ref": "#/components/schemas/divFraction"
          },
          "dlvAddSpecific": {
            "$ref": "#/components/schemas/dlvAddSpecific"
          },
          "dlvAssignLoan": {
            "$ref": "#/components/schemas/dlvAssignLoan"
          },
          "dlvBearer": {
            "$ref": "#/components/schemas/dlvBearer"
          },
          "dlvConsentLoan": {
            "$ref": "#/components/schemas/dlvConsentLoan"
          },
          "dlvContingent": {
            "$ref": "#/components/schemas/dlvContingent"
          },
          "dlvDirectLoan": {
            "$ref": "#/components/schemas/dlvDirectLoan"
          },
          "dlvDomCurrency": {
            "$ref": "#/components/schemas/dlvDomCurrency"
          },
          "dlvDomIssuance": {
            "$ref": "#/components/schemas/dlvDomIssuance"
          },
          "dlvDomLaw": {
            "$ref": "#/components/schemas/dlvDomLaw"
          },
          "dlvExcludeSpecific": {
            "$ref": "#/components/schemas/dlvExcludeSpecific"
          },
          "dlvIndirectLoan": {
            "$ref": "#/components/schemas/dlvIndirectLoan"
          },
          "dlvListed": {
            "$ref": "#/components/schemas/dlvListed"
          },
          "dlvMatured": {
            "$ref": "#/components/schemas/dlvMatured"
          },
          "dlvMaxMaturity": {
            "$ref": "#/components/schemas/dlvMaxMaturity"
          },
          "dlvParipassu": {
            "$ref": "#/components/schemas/dlvParipassu"
          },
          "dlvRestructMatLimit": {
            "$ref": "#/components/schemas/dlvRestructMatLimit"
          },
          "dlvSovereign": {
            "$ref": "#/components/schemas/dlvSovereign"
          },
          "dlvSpecCurrency": {
            "$ref": "#/components/schemas/dlvSpecCurrency"
          },
          "dlvTransferable": {
            "$ref": "#/components/schemas/dlvTransferable"
          },
          "drCusip": {
            "$ref": "#/components/schemas/drCusip"
          },
          "drRatio": {
            "$ref": "#/components/schemas/drRatio"
          },
          "drType": {
            "$ref": "#/components/schemas/drType"
          },
          "drdEligible": {
            "$ref": "#/components/schemas/drdEligible"
          },
          "dscr": {
            "$ref": "#/components/schemas/dscr"
          },
          "endAdjFlag": {
            "$ref": "#/components/schemas/endAdjFlag"
          },
          "escrow": {
            "$ref": "#/components/schemas/escrow"
          },
          "escrowType": {
            "$ref": "#/components/schemas/escrowType"
          },
          "eventAcceleration": {
            "$ref": "#/components/schemas/eventAcceleration"
          },
          "eventBankruptcy": {
            "$ref": "#/components/schemas/eventBankruptcy"
          },
          "eventDefault": {
            "$ref": "#/components/schemas/eventDefault"
          },
          "eventFailurePay": {
            "$ref": "#/components/schemas/eventFailurePay"
          },
          "eventNotice": {
            "$ref": "#/components/schemas/eventNotice"
          },
          "eventRepudiation": {
            "$ref": "#/components/schemas/eventRepudiation"
          },
          "eventRestruct": {
            "$ref": "#/components/schemas/eventRestruct"
          },
          "exchangeMic": {
            "$ref": "#/components/schemas/exchangeMic"
          },
          "excludeAi": {
            "$ref": "#/components/schemas/excludeAi"
          },
          "exerciseTime": {
            "$ref": "#/components/schemas/exerciseTime"
          },
          "exerciseType": {
            "$ref": "#/components/schemas/exerciseType"
          },
          "expDt": {
            "$ref": "#/components/schemas/expDt"
          },
          "expectedMaturity": {
            "$ref": "#/components/schemas/expectedMaturity"
          },
          "expiryTime": {
            "$ref": "#/components/schemas/expiryTime"
          },
          "extraRedemFlag": {
            "$ref": "#/components/schemas/extraRedemFlag"
          },
          "feeBasis": {
            "$ref": "#/components/schemas/feeBasis"
          },
          "feesStartDate": {
            "$ref": "#/components/schemas/feesStartDate"
          },
          "firstPayDt": {
            "$ref": "#/components/schemas/firstPayDt"
          },
          "firstPrinDt": {
            "$ref": "#/components/schemas/firstPrinDt"
          },
          "firstReset": {
            "$ref": "#/components/schemas/firstReset"
          },
          "firstResetCapPct": {
            "$ref": "#/components/schemas/firstResetCapPct"
          },
          "firstResetFlavour": {
            "$ref": "#/components/schemas/firstResetFlavour"
          },
          "firstSettleDt": {
            "$ref": "#/components/schemas/firstSettleDt"
          },
          "fiscalYear": {
            "$ref": "#/components/schemas/fiscalYear"
          },
          "fixedPrincipalPayment": {
            "$ref": "#/components/schemas/fixedPrincipalPayment"
          },
          "flag144a": {
            "$ref": "#/components/schemas/flag144a"
          },
          "flagCcn": {
            "$ref": "#/components/schemas/flagCcn"
          },
          "flagControl": {
            "$ref": "#/components/schemas/flagControl"
          },
          "flagConvert": {
            "$ref": "#/components/schemas/flagConvert"
          },
          "flagDeriv": {
            "$ref": "#/components/schemas/flagDeriv"
          },
          "flagEndAdj": {
            "$ref": "#/components/schemas/flagEndAdj"
          },
          "flagEom": {
            "$ref": "#/components/schemas/flagEom"
          },
          "flagErisa": {
            "$ref": "#/components/schemas/flagErisa"
          },
          "flagPerforming": {
            "$ref": "#/components/schemas/flagPerforming"
          },
          "flagRegRights": {
            "$ref": "#/components/schemas/flagRegRights"
          },
          "flagRound": {
            "$ref": "#/components/schemas/flagRound"
          },
          "flagSmmea": {
            "$ref": "#/components/schemas/flagSmmea"
          },
          "floaterId": {
            "$ref": "#/components/schemas/floaterId"
          },
          "floaterOrigFace": {
            "$ref": "#/components/schemas/floaterOrigFace"
          },
          "floaterSet": {
            "properties": {
              "floaterRecord": {
                "items": {
                  "$ref": "#/components/schemas/FloaterRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "floaterRecord"
            ],
            "type": "object"
          },
          "fnlSetmtMeth": {
            "$ref": "#/components/schemas/fnlSetmtMeth"
          },
          "fundedAmount": {
            "$ref": "#/components/schemas/fundedAmount"
          },
          "funding": {
            "$ref": "#/components/schemas/funding"
          },
          "futureClass": {
            "$ref": "#/components/schemas/futureClass"
          },
          "futureCode": {
            "$ref": "#/components/schemas/futureCode"
          },
          "gainShare": {
            "$ref": "#/components/schemas/gainShare"
          },
          "graceExtension": {
            "$ref": "#/components/schemas/graceExtension"
          },
          "ibndDataSet": {
            "properties": {
              "ibndDataRecord": {
                "items": {
                  "$ref": "#/components/schemas/IbndDataRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "ibndDataRecord"
            ],
            "type": "object"
          },
          "incomePayment": {
            "$ref": "#/components/schemas/incomePayment"
          },
          "independentAmtSet": {
            "properties": {
              "independentAmtRecord": {
                "items": {
                  "$ref": "#/components/schemas/IndependentAmtRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "independentAmtRecord"
            ],
            "type": "object"
          },
          "initResetPeriod": {
            "$ref": "#/components/schemas/initResetPeriod"
          },
          "interestTreatment": {
            "$ref": "#/components/schemas/interestTreatment"
          },
          "intexDealName": {
            "$ref": "#/components/schemas/intexDealName"
          },
          "intexTrancheName": {
            "$ref": "#/components/schemas/intexTrancheName"
          },
          "issueDt": {
            "$ref": "#/components/schemas/issueDt"
          },
          "issueExchangesSet": {
            "properties": {
              "issueExchangesRecord": {
                "items": {
                  "$ref": "#/components/schemas/IssuerExchangeRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "issueExchangesRecord"
            ],
            "type": "object"
          },
          "issuePrice": {
            "$ref": "#/components/schemas/issuePrice"
          },
          "issueSpeed": {
            "$ref": "#/components/schemas/issueSpeed"
          },
          "issueSpread": {
            "$ref": "#/components/schemas/issueSpread"
          },
          "issueYield": {
            "$ref": "#/components/schemas/issueYield"
          },
          "issuerId": {
            "$ref": "#/components/schemas/issuerId"
          },
          "lastRegularPmt": {
            "$ref": "#/components/schemas/lastRegularPmt"
          },
          "leadMgr": {
            "$ref": "#/components/schemas/leadMgr"
          },
          "lehIndustry": {
            "$ref": "#/components/schemas/lehIndustry"
          },
          "lien": {
            "$ref": "#/components/schemas/lien"
          },
          "lienType": {
            "$ref": "#/components/schemas/lienType"
          },
          "liquidity": {
            "$ref": "#/components/schemas/liquidity"
          },
          "liquidityFee": {
            "$ref": "#/components/schemas/liquidityFee"
          },
          "loanPurpose": {
            "$ref": "#/components/schemas/loanPurpose"
          },
          "lockoutMonths": {
            "$ref": "#/components/schemas/lockoutMonths"
          },
          "ltv": {
            "$ref": "#/components/schemas/ltv"
          },
          "makeWholeCall": {
            "$ref": "#/components/schemas/makeWholeCall"
          },
          "makeWholeSpread": {
            "$ref": "#/components/schemas/makeWholeSpread"
          },
          "market": {
            "$ref": "#/components/schemas/market"
          },
          "marketIssue": {
            "$ref": "#/components/schemas/marketIssue"
          },
          "marketMic": {
            "$ref": "#/components/schemas/marketMic"
          },
          "maturity": {
            "$ref": "#/components/schemas/maturity"
          },
          "maxCallNotice": {
            "$ref": "#/components/schemas/maxCallNotice"
          },
          "maxPutNotice": {
            "$ref": "#/components/schemas/maxPutNotice"
          },
          "mgmtFees": {
            "$ref": "#/components/schemas/mgmtFees"
          },
          "minCallNotice": {
            "$ref": "#/components/schemas/minCallNotice"
          },
          "minLotSize": {
            "$ref": "#/components/schemas/minLotSize"
          },
          "minPutNotice": {
            "$ref": "#/components/schemas/minPutNotice"
          },
          "minTrdSize": {
            "$ref": "#/components/schemas/minTrdSize"
          },
          "mipSecId": {
            "$ref": "#/components/schemas/mipSecId"
          },
          "mirror": {
            "$ref": "#/components/schemas/mirror"
          },
          "mirrorAssocCusip": {
            "$ref": "#/components/schemas/mirrorAssocCusip"
          },
          "miscFee": {
            "$ref": "#/components/schemas/miscFee"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "mtgSubtype": {
            "$ref": "#/components/schemas/mtgSubtype"
          },
          "mtn": {
            "$ref": "#/components/schemas/mtn"
          },
          "multiOrigFl": {
            "$ref": "#/components/schemas/multiOrigFl"
          },
          "muniType": {
            "$ref": "#/components/schemas/muniType"
          },
          "negAmCap": {
            "$ref": "#/components/schemas/negAmCap"
          },
          "netCpn": {
            "$ref": "#/components/schemas/netCpn"
          },
          "notesSet": {
            "properties": {
              "notesRecord": {
                "items": {
                  "$ref": "#/components/schemas/NotesRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "notesRecord"
            ],
            "type": "object"
          },
          "noticeDate": {
            "$ref": "#/components/schemas/noticeDate"
          },
          "noticeOfPhysical": {
            "$ref": "#/components/schemas/noticeOfPhysical"
          },
          "notifyingParty": {
            "$ref": "#/components/schemas/notifyingParty"
          },
          "notionalAmt": {
            "$ref": "#/components/schemas/notionalAmt"
          },
          "notionalFace": {
            "$ref": "#/components/schemas/notionalFace"
          },
          "nth": {
            "$ref": "#/components/schemas/nth"
          },
          "ntlAmortTiming": {
            "$ref": "#/components/schemas/ntlAmortTiming"
          },
          "ntlFlag": {
            "$ref": "#/components/schemas/ntlFlag"
          },
          "ntlVarFixed": {
            "$ref": "#/components/schemas/ntlVarFixed"
          },
          "oblAddSpecific": {
            "$ref": "#/components/schemas/oblAddSpecific"
          },
          "oblCategory": {
            "$ref": "#/components/schemas/oblCategory"
          },
          "oblContingent": {
            "$ref": "#/components/schemas/oblContingent"
          },
          "oblDomCurrency": {
            "$ref": "#/components/schemas/oblDomCurrency"
          },
          "oblDomIssuance": {
            "$ref": "#/components/schemas/oblDomIssuance"
          },
          "oblDomLaw": {
            "$ref": "#/components/schemas/oblDomLaw"
          },
          "oblExcludeSpecific": {
            "$ref": "#/components/schemas/oblExcludeSpecific"
          },
          "oblListed": {
            "$ref": "#/components/schemas/oblListed"
          },
          "oblParipassu": {
            "$ref": "#/components/schemas/oblParipassu"
          },
          "oblSovereign": {
            "$ref": "#/components/schemas/oblSovereign"
          },
          "oblSpecCurrency": {
            "$ref": "#/components/schemas/oblSpecCurrency"
          },
          "offeringDataSet": {
            "properties": {
              "offeringDataRecord": {
                "items": {
                  "$ref": "#/components/schemas/OfferingDataRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "offeringDataRecord"
            ],
            "type": "object"
          },
          "oidPrice": {
            "$ref": "#/components/schemas/oidPrice"
          },
          "oidYield": {
            "$ref": "#/components/schemas/oidYield"
          },
          "optionCallPut": {
            "$ref": "#/components/schemas/optionCallPut"
          },
          "optionNum": {
            "$ref": "#/components/schemas/optionNum"
          },
          "optionType": {
            "$ref": "#/components/schemas/optionType"
          },
          "origBasePrice": {
            "$ref": "#/components/schemas/origBasePrice"
          },
          "origCoupon": {
            "$ref": "#/components/schemas/origCoupon"
          },
          "origGrossMargin": {
            "$ref": "#/components/schemas/origGrossMargin"
          },
          "origIoMonths": {
            "$ref": "#/components/schemas/origIoMonths"
          },
          "origLifeCap": {
            "$ref": "#/components/schemas/origLifeCap"
          },
          "origLifeFloor": {
            "$ref": "#/components/schemas/origLifeFloor"
          },
          "origNetMargin": {
            "$ref": "#/components/schemas/origNetMargin"
          },
          "origTerm": {
            "$ref": "#/components/schemas/origTerm"
          },
          "origWac": {
            "$ref": "#/components/schemas/origWac"
          },
          "origWam": {
            "$ref": "#/components/schemas/origWam"
          },
          "originalBalance": {
            "$ref": "#/components/schemas/originalBalance"
          },
          "otherPrepayPrem": {
            "$ref": "#/components/schemas/otherPrepayPrem"
          },
          "paidDownDate": {
            "$ref": "#/components/schemas/paidDownDate"
          },
          "payAdjFreq": {
            "$ref": "#/components/schemas/payAdjFreq"
          },
          "payCap": {
            "$ref": "#/components/schemas/payCap"
          },
          "payCurrency": {
            "$ref": "#/components/schemas/payCurrency"
          },
          "payFxReference": {
            "$ref": "#/components/schemas/payFxReference"
          },
          "payNotional": {
            "$ref": "#/components/schemas/payNotional"
          },
          "payUpfrontPmt": {
            "$ref": "#/components/schemas/payUpfrontPmt"
          },
          "pcDayConv": {
            "$ref": "#/components/schemas/pcDayConv"
          },
          "pdAols": {
            "$ref": "#/components/schemas/pdAols"
          },
          "pdCoupon": {
            "$ref": "#/components/schemas/pdCoupon"
          },
          "pdCouponDt": {
            "$ref": "#/components/schemas/pdCouponDt"
          },
          "pdFactor": {
            "$ref": "#/components/schemas/pdFactor"
          },
          "pdFactorDt": {
            "$ref": "#/components/schemas/pdFactorDt"
          },
          "pdGeoPct": {
            "$ref": "#/components/schemas/pdGeoPct"
          },
          "pdGeoState": {
            "$ref": "#/components/schemas/pdGeoState"
          },
          "pdGrossMargin": {
            "$ref": "#/components/schemas/pdGrossMargin"
          },
          "pdLifeCap": {
            "$ref": "#/components/schemas/pdLifeCap"
          },
          "pdLifeFloor": {
            "$ref": "#/components/schemas/pdLifeFloor"
          },
          "pdMosToRoll": {
            "$ref": "#/components/schemas/pdMosToRoll"
          },
          "pdNetMargin": {
            "$ref": "#/components/schemas/pdNetMargin"
          },
          "pdWac": {
            "$ref": "#/components/schemas/pdWac"
          },
          "pdWala": {
            "$ref": "#/components/schemas/pdWala"
          },
          "pdWalaDt": {
            "$ref": "#/components/schemas/pdWalaDt"
          },
          "pdWam": {
            "$ref": "#/components/schemas/pdWam"
          },
          "pdWaolt": {
            "$ref": "#/components/schemas/pdWaolt"
          },
          "percentStrikePrice": {
            "$ref": "#/components/schemas/percentStrikePrice"
          },
          "pmtAdjMeth": {
            "$ref": "#/components/schemas/pmtAdjMeth"
          },
          "pmtCal": {
            "$ref": "#/components/schemas/pmtCal"
          },
          "pmtDelay1": {
            "$ref": "#/components/schemas/pmtDelay1"
          },
          "pmtDelay1Conv": {
            "$ref": "#/components/schemas/pmtDelay1Conv"
          },
          "pmtDelay2": {
            "$ref": "#/components/schemas/pmtDelay2"
          },
          "pmtDelay2Conv": {
            "$ref": "#/components/schemas/pmtDelay2Conv"
          },
          "pmtFreqType": {
            "$ref": "#/components/schemas/pmtFreqType"
          },
          "pmtLocation": {
            "$ref": "#/components/schemas/pmtLocation"
          },
          "pmtThreshold": {
            "$ref": "#/components/schemas/pmtThreshold"
          },
          "poolNum": {
            "$ref": "#/components/schemas/poolNum"
          },
          "premium": {
            "$ref": "#/components/schemas/premium"
          },
          "premiumDate": {
            "$ref": "#/components/schemas/premiumDate"
          },
          "premiumPrice": {
            "$ref": "#/components/schemas/premiumPrice"
          },
          "premiumType": {
            "$ref": "#/components/schemas/premiumType"
          },
          "prepayPenaltyTerm": {
            "$ref": "#/components/schemas/prepayPenaltyTerm"
          },
          "prepayPenaltyType": {
            "$ref": "#/components/schemas/prepayPenaltyType"
          },
          "priceAsPct": {
            "$ref": "#/components/schemas/priceAsPct"
          },
          "priceMultiplier": {
            "$ref": "#/components/schemas/priceMultiplier"
          },
          "pricing": {
            "$ref": "#/components/schemas/pricing"
          },
          "pricingCusip": {
            "$ref": "#/components/schemas/pricingCusip"
          },
          "prinFreq": {
            "$ref": "#/components/schemas/prinFreq"
          },
          "progCode": {
            "$ref": "#/components/schemas/progCode"
          },
          "progCodeSub": {
            "$ref": "#/components/schemas/progCodeSub"
          },
          "projectCode": {
            "$ref": "#/components/schemas/projectCode"
          },
          "propertyAddress": {
            "$ref": "#/components/schemas/propertyAddress"
          },
          "propertyName": {
            "$ref": "#/components/schemas/propertyName"
          },
          "propertyType": {
            "$ref": "#/components/schemas/propertyType"
          },
          "prospectus": {
            "$ref": "#/components/schemas/prospectus"
          },
          "psaClass": {
            "$ref": "#/components/schemas/psaClass"
          },
          "putCall": {
            "$ref": "#/components/schemas/putCall"
          },
          "putMandatory": {
            "$ref": "#/components/schemas/putMandatory"
          },
          "putType": {
            "$ref": "#/components/schemas/putType"
          },
          "putcallSet": {
            "properties": {
              "putcallRecord": {
                "items": {
                  "$ref": "#/components/schemas/PutCallRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "putcallRecord"
            ],
            "type": "object"
          },
          "ratchetCoeffcntValSet": {
            "properties": {
              "ratchetCoeffcntValRecord": {
                "items": {
                  "$ref": "#/components/schemas/RatchetCoeffcntValRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "ratchetCoeffcntValRecord"
            ],
            "type": "object"
          },
          "ratchetEventValSet": {
            "properties": {
              "ratchetEventValRecord": {
                "items": {
                  "$ref": "#/components/schemas/RatchetEventValRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "ratchetEventValRecord"
            ],
            "type": "object"
          },
          "ratchetSet": {
            "properties": {
              "ratchetRecord": {
                "items": {
                  "$ref": "#/components/schemas/RatchetRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "ratchetRecord"
            ],
            "type": "object"
          },
          "ratingSet": {
            "properties": {
              "ratingRecord": {
                "items": {
                  "$ref": "#/components/schemas/RatingRecordSecMaster"
                },
                "type": "array"
              }
            },
            "required": [
              "ratingRecord"
            ],
            "type": "object"
          },
          "recNotional": {
            "$ref": "#/components/schemas/recNotional"
          },
          "recUpfrontPmt": {
            "$ref": "#/components/schemas/recUpfrontPmt"
          },
          "redFreq": {
            "$ref": "#/components/schemas/redFreq"
          },
          "redemptionValue": {
            "$ref": "#/components/schemas/redemptionValue"
          },
          "referenceEntity": {
            "$ref": "#/components/schemas/referenceEntity"
          },
          "referenceEntityType": {
            "$ref": "#/components/schemas/referenceEntityType"
          },
          "referencePrice": {
            "$ref": "#/components/schemas/referencePrice"
          },
          "referenceType": {
            "$ref": "#/components/schemas/referenceType"
          },
          "remarketingFee": {
            "$ref": "#/components/schemas/remarketingFee"
          },
          "reremic": {
            "$ref": "#/components/schemas/reremic"
          },
          "resetIndex": {
            "$ref": "#/components/schemas/resetIndex"
          },
          "restructSupplement": {
            "$ref": "#/components/schemas/restructSupplement"
          },
          "reviewedBy": {
            "$ref": "#/components/schemas/reviewedBy"
          },
          "riskCountry": {
            "$ref": "#/components/schemas/riskCountry"
          },
          "roundFlag": {
            "$ref": "#/components/schemas/roundFlag"
          },
          "roundPrecision": {
            "$ref": "#/components/schemas/roundPrecision"
          },
          "salIndustry": {
            "$ref": "#/components/schemas/salIndustry"
          },
          "scheduleSet": {
            "properties": {
              "scheduleRecord": {
                "items": {
                  "$ref": "#/components/schemas/ScheduleRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "scheduleRecord"
            ],
            "type": "object"
          },
          "secDesc2": {
            "$ref": "#/components/schemas/secDesc2"
          },
          "secType": {
            "$ref": "#/components/schemas/secType"
          },
          "sectorSet": {
            "properties": {
              "sectorRecord": {
                "items": {
                  "$ref": "#/components/schemas/SectorRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "sectorRecord"
            ],
            "type": "object"
          },
          "settleCal": {
            "$ref": "#/components/schemas/settleCal"
          },
          "settleDays": {
            "$ref": "#/components/schemas/settleDays"
          },
          "settleLocation": {
            "$ref": "#/components/schemas/settleLocation"
          },
          "settleMethod": {
            "$ref": "#/components/schemas/settleMethod"
          },
          "shortfallId": {
            "$ref": "#/components/schemas/shortfallId"
          },
          "sinkFundMethod": {
            "$ref": "#/components/schemas/sinkFundMethod"
          },
          "sinkMandatory": {
            "$ref": "#/components/schemas/sinkMandatory"
          },
          "sinkSet": {
            "properties": {
              "sinkRecord": {
                "items": {
                  "$ref": "#/components/schemas/SinkRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "sinkRecord"
            ],
            "type": "object"
          },
          "sinkType": {
            "$ref": "#/components/schemas/sinkType"
          },
          "smSecGroup": {
            "$ref": "#/components/schemas/secGroup"
          },
          "smSecType": {
            "$ref": "#/components/schemas/secType"
          },
          "smVectorDataSet": {
            "properties": {
              "smVectorDataRecord": {
                "items": {
                  "$ref": "#/components/schemas/SmVectorDataRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "smVectorDataRecord"
            ],
            "type": "object"
          },
          "speedMeasure": {
            "$ref": "#/components/schemas/speedMeasure"
          },
          "standardContract": {
            "$ref": "#/components/schemas/standardContract"
          },
          "state": {
            "$ref": "#/components/schemas/state"
          },
          "strike": {
            "$ref": "#/components/schemas/strike"
          },
          "strikeCap": {
            "$ref": "#/components/schemas/strikeCap"
          },
          "strikeType": {
            "$ref": "#/components/schemas/strikeType"
          },
          "structure": {
            "$ref": "#/components/schemas/structure"
          },
          "subFreq": {
            "$ref": "#/components/schemas/subFreq"
          },
          "syndicateDataSet": {
            "properties": {
              "syndicateDataRecord": {
                "items": {
                  "$ref": "#/components/schemas/SyndicateDataRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "syndicateDataRecord"
            ],
            "type": "object"
          },
          "taxStatus": {
            "$ref": "#/components/schemas/taxStatus"
          },
          "tbaCusip8": {
            "$ref": "#/components/schemas/tbaCusip8"
          },
          "tbaEligible": {
            "$ref": "#/components/schemas/tbaEligible"
          },
          "tickSize": {
            "$ref": "#/components/schemas/tickSize"
          },
          "tickValue": {
            "$ref": "#/components/schemas/tickValue"
          },
          "ticker": {
            "$ref": "#/components/schemas/secTicker"
          },
          "tickerPfx": {
            "$ref": "#/components/schemas/tickerPfx"
          },
          "tier": {
            "$ref": "#/components/schemas/tier"
          },
          "tranche": {
            "$ref": "#/components/schemas/tranche"
          },
          "trusteeFee": {
            "$ref": "#/components/schemas/trusteeFee"
          },
          "udfSet": {
            "properties": {
              "udfRecord": {
                "items": {
                  "$ref": "#/components/schemas/UDFRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "udfRecord"
            ],
            "type": "object"
          },
          "underlyingCusip": {
            "$ref": "#/components/schemas/underlyingCusip"
          },
          "underlyingFace": {
            "$ref": "#/components/schemas/underlyingFace"
          },
          "underlyingId": {
            "$ref": "#/components/schemas/underlyingId"
          },
          "underlyingInterest": {
            "$ref": "#/components/schemas/underlyingInterest"
          },
          "underlyingValueType": {
            "$ref": "#/components/schemas/underlyingValueType"
          },
          "units": {
            "$ref": "#/components/schemas/units"
          },
          "useOfProceeds": {
            "$ref": "#/components/schemas/useOfProceeds"
          },
          "wiFlag": {
            "$ref": "#/components/schemas/wiFlag"
          },
          "yieldMaintRate": {
            "$ref": "#/components/schemas/yieldMaintRate"
          },
          "zipCode": {
            "$ref": "#/components/schemas/zipCode"
          }
        },
        "type": "object"
      },
      "ComponentRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ComponentRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "endDate": {
            "$ref": "#/components/schemas/endDate"
          },
          "origFace": {
            "$ref": "#/components/schemas/origFace"
          },
          "subCusip": {
            "$ref": "#/components/schemas/subCusip"
          }
        },
        "required": [
          "origFace",
          "subCusip"
        ],
        "type": "object"
      },
      "ConversionRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConversionRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "convCurrency": {
            "$ref": "#/components/schemas/convCurrency"
          },
          "convCusip": {
            "$ref": "#/components/schemas/convCusip"
          },
          "convDesc": {
            "$ref": "#/components/schemas/convDesc"
          },
          "convFreq": {
            "$ref": "#/components/schemas/convFreq"
          },
          "convPrice": {
            "$ref": "#/components/schemas/convPrice"
          },
          "convShares": {
            "$ref": "#/components/schemas/convShares"
          },
          "convType": {
            "$ref": "#/components/schemas/convType"
          },
          "endDt": {
            "$ref": "#/components/schemas/endDt"
          },
          "fractionFlag": {
            "$ref": "#/components/schemas/fractionFlag"
          },
          "startDt": {
            "$ref": "#/components/schemas/startDt"
          }
        },
        "required": [
          "convCusip",
          "convType",
          "startDt"
        ],
        "type": "object"
      },
      "ConvertCmplxRedemptRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertCmplxRedemptRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "issuersBoundaryDt": {
            "$ref": "#/components/schemas/issuersBoundaryDt"
          },
          "maxNoticeVal": {
            "$ref": "#/components/schemas/maxNoticeVal"
          },
          "minNoticeVal": {
            "$ref": "#/components/schemas/minNoticeVal"
          },
          "noticeDaysCd": {
            "$ref": "#/components/schemas/noticeDaysCd"
          },
          "pmtCalcCd": {
            "$ref": "#/components/schemas/pmtCalcCd"
          },
          "pmtComponentCd": {
            "$ref": "#/components/schemas/pmtComponentCd"
          },
          "redemptDaysVal": {
            "$ref": "#/components/schemas/redemptDaysVal"
          },
          "redemptDelayDaysCd": {
            "$ref": "#/components/schemas/redemptDelayDaysCd"
          },
          "redemptDelayVal": {
            "$ref": "#/components/schemas/redemptDelayVal"
          },
          "redemptFactor": {
            "$ref": "#/components/schemas/redemptFactor"
          },
          "redemptPriceCd": {
            "$ref": "#/components/schemas/redemptPriceCd"
          },
          "redemptTypeCd": {
            "$ref": "#/components/schemas/redemptTypeCd"
          },
          "settleCashDelayCd": {
            "$ref": "#/components/schemas/settleCashDelayCd"
          },
          "settleDelayCd": {
            "$ref": "#/components/schemas/settleDelayCd"
          },
          "settleDelayDayCombo": {
            "$ref": "#/components/schemas/settleDelayDayCombo"
          },
          "settleSharesDelayDay": {
            "$ref": "#/components/schemas/settleSharesDelayDay"
          }
        },
        "required": [
          "redemptTypeCd"
        ],
        "type": "object"
      },
      "ConvertContgSchedRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertContgSchedRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "affectivePriodEndDt": {
            "$ref": "#/components/schemas/affectivePriodEndDt"
          },
          "affectivePriodStartDt": {
            "$ref": "#/components/schemas/affectivePriodStartDt"
          },
          "contingentOptionNum": {
            "$ref": "#/components/schemas/contingentOptionNum"
          },
          "contingentTriggType": {
            "$ref": "#/components/schemas/contingentTriggType"
          },
          "convertibilityFlag": {
            "$ref": "#/components/schemas/convertibilityFlag"
          },
          "setPeriodEndDt": {
            "$ref": "#/components/schemas/setPeriodEndDt"
          },
          "setPeriodStartDt": {
            "$ref": "#/components/schemas/setPeriodStartDt"
          }
        },
        "required": [
          "contingentOptionNum",
          "contingentTriggType",
          "setPeriodStartDt"
        ],
        "type": "object"
      },
      "ConvertContingentRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertContingentRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "contingentOptionNum": {
            "$ref": "#/components/schemas/contingentOptionNum"
          },
          "contingentRatingTriggCd": {
            "$ref": "#/components/schemas/contingentRatingTriggCd"
          },
          "dbtTriggRatio": {
            "$ref": "#/components/schemas/dbtTriggRatio"
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "eqtResetN1": {
            "$ref": "#/components/schemas/eqtResetN1"
          },
          "eqtResetN2": {
            "$ref": "#/components/schemas/eqtResetN2"
          },
          "eqtResetPeriod": {
            "$ref": "#/components/schemas/eqtResetPeriod"
          },
          "eqtResetPeriodCalCode": {
            "$ref": "#/components/schemas/eqtResetPeriodCalCode"
          },
          "eqtResetType": {
            "$ref": "#/components/schemas/eqtResetType"
          },
          "eqtTriggCode": {
            "$ref": "#/components/schemas/eqtTriggCode"
          },
          "eqtTriggInc": {
            "$ref": "#/components/schemas/eqtTriggInc"
          },
          "eqtTriggIncPeriodCode": {
            "$ref": "#/components/schemas/eqtTriggIncPeriodCode"
          },
          "eqtTriggKnockin": {
            "$ref": "#/components/schemas/eqtTriggKnockin"
          },
          "eqtTriggOutofDays": {
            "$ref": "#/components/schemas/eqtTriggOutofDays"
          },
          "eqtTriggSampleDays": {
            "$ref": "#/components/schemas/eqtTriggSampleDays"
          },
          "eqtTriggVal": {
            "$ref": "#/components/schemas/eqtTriggVal"
          },
          "premTrigg": {
            "$ref": "#/components/schemas/premTrigg"
          },
          "premTriggConvAfter": {
            "$ref": "#/components/schemas/premTriggConvAfter"
          },
          "premTriggConvFor": {
            "$ref": "#/components/schemas/premTriggConvFor"
          },
          "premTriggOutofDays": {
            "$ref": "#/components/schemas/premTriggOutofDays"
          },
          "premTriggSampleDays": {
            "$ref": "#/components/schemas/premTriggSampleDays"
          },
          "ratingTrigg1": {
            "$ref": "#/components/schemas/ratingTrigg1"
          },
          "ratingTrigg2": {
            "$ref": "#/components/schemas/ratingTrigg2"
          },
          "ratingTrigg3": {
            "$ref": "#/components/schemas/ratingTrigg3"
          },
          "ratingTriggSrc1": {
            "$ref": "#/components/schemas/ratingTriggSrc1"
          },
          "ratingTriggSrc2": {
            "$ref": "#/components/schemas/ratingTriggSrc2"
          },
          "ratingTriggSrc3": {
            "$ref": "#/components/schemas/ratingTriggSrc3"
          }
        },
        "required": [
          "contingentOptionNum",
          "effectiveDate"
        ],
        "type": "object"
      },
      "ConvertDefRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertDefRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "cnvGrpCode": {
            "$ref": "#/components/schemas/cnvGrpCode"
          },
          "cnvSubGrpCode": {
            "$ref": "#/components/schemas/cnvSubGrpCode"
          },
          "crossCurrencyFlag": {
            "$ref": "#/components/schemas/crossCurrencyFlag"
          },
          "diffSettleCurrency": {
            "$ref": "#/components/schemas/diffSettleCurrency"
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "issueStatusCd": {
            "$ref": "#/components/schemas/issueStatusCd"
          },
          "mandatoryConvFlag": {
            "$ref": "#/components/schemas/mandatoryConvFlag"
          },
          "settleCurrOptionCode": {
            "$ref": "#/components/schemas/settleCurrOptionCode"
          },
          "shrDeliveryCode": {
            "$ref": "#/components/schemas/shrDeliveryCode"
          }
        },
        "required": [
          "effectiveDate"
        ],
        "type": "object"
      },
      "ConvertDivProtectRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertDivProtectRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "cap": {
            "$ref": "#/components/schemas/cap"
          },
          "cashThreshold": {
            "$ref": "#/components/schemas/cashThreshold"
          },
          "correctCashThreshold": {
            "$ref": "#/components/schemas/correctCashThreshold"
          },
          "dprotAccTypeCode": {
            "$ref": "#/components/schemas/dprotAccTypeCode"
          },
          "dprotCalcMethod": {
            "$ref": "#/components/schemas/dprotCalcMethod"
          },
          "dprotDirection": {
            "$ref": "#/components/schemas/dprotDirection"
          },
          "dprotEqualDiv": {
            "$ref": "#/components/schemas/dprotEqualDiv"
          },
          "dprotScaleFactor": {
            "$ref": "#/components/schemas/dprotScaleFactor"
          },
          "dprotStockPriceDays": {
            "$ref": "#/components/schemas/dprotStockPriceDays"
          },
          "dprotStockPriceEndDays": {
            "$ref": "#/components/schemas/dprotStockPriceEndDays"
          },
          "dprotStockPriceEndDt": {
            "$ref": "#/components/schemas/dprotStockPriceEndDt"
          },
          "dprotStockPriceMethod": {
            "$ref": "#/components/schemas/dprotStockPriceMethod"
          },
          "dprotTypeCode": {
            "$ref": "#/components/schemas/dprotTypeCode"
          },
          "earningThreshold": {
            "$ref": "#/components/schemas/earningThreshold"
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "endDate": {
            "$ref": "#/components/schemas/endDate"
          },
          "minChange": {
            "$ref": "#/components/schemas/minChange"
          },
          "prevDivThreshold": {
            "$ref": "#/components/schemas/prevDivThreshold"
          },
          "thresholdLogicCode": {
            "$ref": "#/components/schemas/thresholdLogicCode"
          },
          "thresholdPeriodCode": {
            "$ref": "#/components/schemas/thresholdPeriodCode"
          },
          "yldThreshold": {
            "$ref": "#/components/schemas/yldThreshold"
          }
        },
        "required": [
          "dprotCalcMethod",
          "dprotTypeCode"
        ],
        "type": "object"
      },
      "ConvertHurdleRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertHurdleRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "allocMethod": {
            "$ref": "#/components/schemas/allocMethod"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "daysInPeriod": {
            "$ref": "#/components/schemas/daysInPeriod"
          },
          "daysInPeriodConv": {
            "$ref": "#/components/schemas/daysInPeriodConv"
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "endDate": {
            "$ref": "#/components/schemas/endDate"
          },
          "hurdleConv": {
            "$ref": "#/components/schemas/hurdleConv"
          },
          "hurdleMaxNoticeVal": {
            "$ref": "#/components/schemas/hurdleMaxNoticeVal"
          },
          "hurdlePrice": {
            "$ref": "#/components/schemas/hurdlePrice"
          },
          "hurdlePriceConv": {
            "$ref": "#/components/schemas/hurdlePriceConv"
          },
          "mkWholeOptionNum": {
            "$ref": "#/components/schemas/mkWholeOptionNum"
          },
          "noticePeriod": {
            "$ref": "#/components/schemas/noticePeriod"
          },
          "noticePeriodConv": {
            "$ref": "#/components/schemas/noticePeriodConv"
          },
          "optionNum": {
            "$ref": "#/components/schemas/optionNum"
          },
          "period": {
            "$ref": "#/components/schemas/period"
          },
          "periodConv": {
            "$ref": "#/components/schemas/periodConv"
          },
          "redemptionMethod": {
            "$ref": "#/components/schemas/redemptionMethod"
          },
          "redemptionPrice": {
            "$ref": "#/components/schemas/redemptionPrice"
          }
        },
        "required": [
          "effectiveDate",
          "optionNum"
        ],
        "type": "object"
      },
      "ConvertInstFeatRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertInstFeatRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "endDate": {
            "$ref": "#/components/schemas/endDate"
          },
          "instFeatCode": {
            "$ref": "#/components/schemas/instFeatCode"
          }
        },
        "required": [
          "effectiveDate",
          "instFeatCode"
        ],
        "type": "object"
      },
      "ConvertMakeWholeRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertMakeWholeRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "cashAmt": {
            "$ref": "#/components/schemas/cashAmt"
          },
          "cashDecrement": {
            "$ref": "#/components/schemas/cashDecrement"
          },
          "cashPmtFactor": {
            "$ref": "#/components/schemas/cashPmtFactor"
          },
          "decrFreqCd": {
            "$ref": "#/components/schemas/decrFreqCd"
          },
          "firstDecrDt": {
            "$ref": "#/components/schemas/firstDecrDt"
          },
          "mkWholeCalcTypeCd": {
            "$ref": "#/components/schemas/mkWholeCalcTypeCd"
          },
          "mkWholeCap": {
            "$ref": "#/components/schemas/mkWholeCap"
          },
          "mkWholeDays": {
            "$ref": "#/components/schemas/mkWholeDays"
          },
          "mkWholeDaysCd": {
            "$ref": "#/components/schemas/mkWholeDaysCd"
          },
          "mkWholeEffDt": {
            "$ref": "#/components/schemas/mkWholeEffDt"
          },
          "mkWholeEndDt": {
            "$ref": "#/components/schemas/mkWholeEndDt"
          },
          "mkWholeFinalCpnDt": {
            "$ref": "#/components/schemas/mkWholeFinalCpnDt"
          },
          "mkWholeFloor": {
            "$ref": "#/components/schemas/mkWholeFloor"
          },
          "mkWholeOptionNum": {
            "$ref": "#/components/schemas/mkWholeOptionNum"
          },
          "mkWholePmtTypeCd": {
            "$ref": "#/components/schemas/mkWholePmtTypeCd"
          },
          "mkWholePriceCd": {
            "$ref": "#/components/schemas/mkWholePriceCd"
          },
          "mkWholePvRate": {
            "$ref": "#/components/schemas/mkWholePvRate"
          },
          "mkWholePvTypeCd": {
            "$ref": "#/components/schemas/mkWholePvTypeCd"
          },
          "mkWholeRateCd": {
            "$ref": "#/components/schemas/mkWholeRateCd"
          },
          "mkWholeTypeCd": {
            "$ref": "#/components/schemas/mkWholeTypeCd"
          },
          "shrSettleFactor": {
            "$ref": "#/components/schemas/shrSettleFactor"
          }
        },
        "required": [
          "mkWholeEffDt",
          "mkWholeOptionNum",
          "mkWholeTypeCd"
        ],
        "type": "object"
      },
      "ConvertMandatoryRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertMandatoryRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "optionNum": {
            "$ref": "#/components/schemas/optionNum"
          },
          "priceRangeLower": {
            "$ref": "#/components/schemas/priceRangeLower"
          },
          "priceRangeUpper": {
            "$ref": "#/components/schemas/priceRangeUpper"
          },
          "ratioRangeLower": {
            "$ref": "#/components/schemas/ratioRangeLower"
          },
          "ratioRangeUpper": {
            "$ref": "#/components/schemas/ratioRangeUpper"
          },
          "underlyingCusip": {
            "$ref": "#/components/schemas/underlyingCusip"
          }
        },
        "required": [
          "effectiveDate",
          "optionNum",
          "underlyingCusip"
        ],
        "type": "object"
      },
      "ConvertSchedRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertSchedRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "cashPmtAmt": {
            "$ref": "#/components/schemas/cashPmtAmt"
          },
          "cashPmtCurrency": {
            "$ref": "#/components/schemas/cashPmtCurrency"
          },
          "cnvChgRsnCd": {
            "$ref": "#/components/schemas/cnvChgRsnCd"
          },
          "cnvRatioCap": {
            "$ref": "#/components/schemas/cnvRatioCap"
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "estimatedTerms": {
            "$ref": "#/components/schemas/estimatedTerms"
          },
          "eventDesc": {
            "$ref": "#/components/schemas/eventDesc"
          },
          "fractionalPmtAmt": {
            "$ref": "#/components/schemas/fractionalPmtAmt"
          },
          "fractionalPmtCurrency": {
            "$ref": "#/components/schemas/fractionalPmtCurrency"
          },
          "fxRate": {
            "$ref": "#/components/schemas/fxRate"
          },
          "fxRateDirection": {
            "$ref": "#/components/schemas/fxRateDirection"
          },
          "incrShareFactor": {
            "$ref": "#/components/schemas/incrShareFactor"
          },
          "optionNum": {
            "$ref": "#/components/schemas/optionNum"
          },
          "parAmt": {
            "$ref": "#/components/schemas/parAmt"
          },
          "price": {
            "$ref": "#/components/schemas/price"
          },
          "priceFormula": {
            "$ref": "#/components/schemas/priceFormula"
          },
          "ratio": {
            "$ref": "#/components/schemas/ratio"
          }
        },
        "required": [
          "effectiveDate",
          "optionNum"
        ],
        "type": "object"
      },
      "ConvertTermsRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertTermsRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "cnvStructCd": {
            "$ref": "#/components/schemas/cnvStructCd"
          },
          "contingentOptionNum": {
            "$ref": "#/components/schemas/contingentOptionNum"
          },
          "convFreq": {
            "$ref": "#/components/schemas/convFreq"
          },
          "conversionType": {
            "$ref": "#/components/schemas/conversionType"
          },
          "couponTypeConversion": {
            "$ref": "#/components/schemas/couponTypeConversion"
          },
          "dilutionProtection": {
            "$ref": "#/components/schemas/dilutionProtection"
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "endDate": {
            "$ref": "#/components/schemas/endDate"
          },
          "exerciseType": {
            "$ref": "#/components/schemas/exerciseType"
          },
          "fractionTreatment": {
            "$ref": "#/components/schemas/fractionTreatment"
          },
          "interestTreatment": {
            "$ref": "#/components/schemas/interestTreatment"
          },
          "mkWholeOptionNum": {
            "$ref": "#/components/schemas/mkWholeOptionNum"
          },
          "noticePeriod": {
            "$ref": "#/components/schemas/noticePeriod"
          },
          "noticePeriodConv": {
            "$ref": "#/components/schemas/noticePeriodConv"
          },
          "optionNum": {
            "$ref": "#/components/schemas/optionNum"
          },
          "optionType": {
            "$ref": "#/components/schemas/optionType"
          },
          "premium": {
            "$ref": "#/components/schemas/premium"
          },
          "settleMethod": {
            "$ref": "#/components/schemas/settleMethod"
          },
          "settlePeriod": {
            "$ref": "#/components/schemas/settlePeriod"
          },
          "settlePeriodConv": {
            "$ref": "#/components/schemas/settlePeriodConv"
          },
          "stockBuybackProtection": {
            "$ref": "#/components/schemas/stockBuybackProtection"
          },
          "underlyingCusip": {
            "$ref": "#/components/schemas/underlyingCusip"
          }
        },
        "required": [
          "effectiveDate",
          "endDate",
          "optionNum"
        ],
        "type": "object"
      },
      "ConvertUnrealisedRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ConvertUnrealisedRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "optionNum": {
            "$ref": "#/components/schemas/optionNum"
          },
          "underlyingCusip": {
            "$ref": "#/components/schemas/underlyingCusip"
          },
          "unrealisedChange": {
            "$ref": "#/components/schemas/unrealisedChange"
          },
          "unrealisedEffectiveDt": {
            "$ref": "#/components/schemas/unrealisedEffectiveDt"
          },
          "unrealisedPrice": {
            "$ref": "#/components/schemas/unrealisedPrice"
          },
          "unrealisedRatio": {
            "$ref": "#/components/schemas/unrealisedRatio"
          }
        },
        "required": [
          "optionNum",
          "unrealisedChange"
        ],
        "type": "object"
      },
      "CountryClassificationRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/CountryClassificationRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "cntry": {
            "$ref": "#/components/schemas/cntry"
          },
          "cntrySrc": {
            "$ref": "#/components/schemas/cntrySrc"
          },
          "cntryType": {
            "$ref": "#/components/schemas/cntryType"
          }
        },
        "required": [
          "cntry",
          "cntrySrc",
          "cntryType"
        ],
        "type": "object"
      },
      "CouponAssetIdMap": {
        "description": "Asset Id map of coupons",
        "properties": {
          "assetId": {
            "$ref": "#/components/schemas/assetId"
          },
          "couponByEffectiveDate": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CouponRecord"
            },
            "description": "Coupon mapped with  by coupon-effective-date",
            "type": "object"
          }
        },
        "required": [
          "assetId",
          "couponByEffectiveDate"
        ],
        "type": "object"
      },
      "CouponData": {
        "description": "Coupons from Aladdin.",
        "properties": {
          "couponDataByAssetId": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CouponAssetIdMap"
            },
            "description": "coupons mapped to aladdin security Ids.",
            "type": "object"
          },
          "errors": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorCode"
            },
            "description": "These are the Issuer Ids which were not processed.",
            "type": "object"
          }
        },
        "required": [
          "couponDataByAssetId",
          "errors"
        ],
        "type": "object"
      },
      "CouponRecord": {
        "description": "Coupon Record Entity",
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/coupons/Coupons.v1.json#/CouponRecord",
            "description": "type describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "cpn": {
            "$ref": "#/components/schemas/cpn"
          },
          "cpnEffectiveDate": {
            "$ref": "#/components/schemas/cpnEffectiveDate"
          },
          "cpnSource": {
            "$ref": "#/components/schemas/cpnSource"
          },
          "indexValue": {
            "$ref": "#/components/schemas/indexValue"
          },
          "secGroup": {
            "$ref": "#/components/schemas/secGroup"
          },
          "secType": {
            "$ref": "#/components/schemas/secType"
          }
        },
        "required": [
          "cpn",
          "cpnEffectiveDate",
          "secGroup",
          "secType"
        ],
        "type": "object"
      },
      "CreditEnhancementRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/CreditEnhancementRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "conditional": {
            "$ref": "#/components/schemas/conditional"
          },
          "maturity": {
            "$ref": "#/components/schemas/endDate"
          },
          "pct": {
            "$ref": "#/components/schemas/percentExposure"
          },
          "provider": {
            "$ref": "#/components/schemas/provider"
          },
          "startDate": {
            "$ref": "#/components/schemas/startDate"
          },
          "type": {
            "$ref": "#/components/schemas/creditEnhType"
          }
        },
        "required": [
          "conditional",
          "pct",
          "provider",
          "type"
        ],
        "type": "object"
      },
      "Cusip2Record": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/Cusip2Record",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/code"
          },
          "identifier": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        "required": [
          "code",
          "identifier"
        ],
        "type": "object"
      },
      "CusipAliasRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/CusipAliasRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/code"
          },
          "identifier": {
            "$ref": "#/components/schemas/identifier"
          },
          "purpose": {
            "$ref": "#/components/schemas/purpose"
          }
        },
        "required": [
          "code",
          "identifier",
          "purpose"
        ],
        "type": "object"
      },
      "CusipLogRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/CusipLogRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "date": {
            "$ref": "#/components/schemas/date"
          },
          "old": {
            "$ref": "#/components/schemas/old"
          }
        },
        "required": [
          "date",
          "old"
        ],
        "type": "object"
      },
      "ErrorCode": {
        "description": "Defines an error that occurred.",
        "properties": {
          "code": {
            "description": "A short mnenomic reference code for the error.",
            "maxLength": 40,
            "type": "string"
          },
          "message": {
            "description": "A human readable description of the error.",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "FactorAssetIdMap": {
        "description": "Asset Id map of factors",
        "properties": {
          "assetId": {
            "$ref": "#/components/schemas/assetId"
          },
          "factorByEffectiveDate": {
            "additionalProperties": {
              "$ref": "#/components/schemas/FactorRecord"
            },
            "description": "Factor mapped with  by Factor-Date",
            "type": "object"
          }
        },
        "required": [
          "assetId",
          "factorByEffectiveDate"
        ],
        "type": "object"
      },
      "FactorData": {
        "description": "Factors from Aladdin.",
        "properties": {
          "errors": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorCode"
            },
            "description": "These are the Issuer Ids which were not processed.",
            "type": "object"
          },
          "factorDataByAssetId": {
            "additionalProperties": {
              "$ref": "#/components/schemas/FactorAssetIdMap"
            },
            "description": "factors mapped to aladdin security Ids.",
            "type": "object"
          }
        },
        "required": [
          "errors",
          "factorDataByAssetId"
        ],
        "type": "object"
      },
      "FactorRecord": {
        "description": "Asset Record Entity",
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/factors/Factors.v1.json#/FactorRecord",
            "description": "type describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "factor": {
            "$ref": "#/components/schemas/factor"
          },
          "factorDate": {
            "$ref": "#/components/schemas/factorDate"
          },
          "factorSource": {
            "$ref": "#/components/schemas/factorSource"
          },
          "secGroup": {
            "$ref": "#/components/schemas/secGroup"
          },
          "secType": {
            "$ref": "#/components/schemas/secType"
          }
        },
        "required": [
          "effectiveDate",
          "factor",
          "secGroup",
          "secType"
        ],
        "type": "object"
      },
      "FloaterRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/FloaterRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "couponCalcMethod": {
            "$ref": "#/components/schemas/couponCalcMethod"
          },
          "endDt": {
            "$ref": "#/components/schemas/endDt"
          },
          "featureCode": {
            "$ref": "#/components/schemas/featureCode"
          },
          "finalInterpolationEnd": {
            "$ref": "#/components/schemas/finalInterpolationEnd"
          },
          "finalInterpolationStart": {
            "$ref": "#/components/schemas/finalInterpolationStart"
          },
          "firstCpnCalcDate": {
            "$ref": "#/components/schemas/firstCpnCalcDate"
          },
          "firstResetDate": {
            "$ref": "#/components/schemas/firstResetDate"
          },
          "flagIndexRound": {
            "$ref": "#/components/schemas/flagIndexRound"
          },
          "grossMargin": {
            "$ref": "#/components/schemas/grossMargin"
          },
          "index0": {
            "$ref": "#/components/schemas/index0"
          },
          "indexPrecision": {
            "$ref": "#/components/schemas/indexPrecision"
          },
          "indx2": {
            "$ref": "#/components/schemas/indx2"
          },
          "initInterpolationEnd": {
            "$ref": "#/components/schemas/initInterpolationEnd"
          },
          "initInterpolationStart": {
            "$ref": "#/components/schemas/initInterpolationStart"
          },
          "initResetMthd": {
            "$ref": "#/components/schemas/initResetMthd"
          },
          "initialCoupon": {
            "$ref": "#/components/schemas/initialCoupon"
          },
          "lifeCap": {
            "$ref": "#/components/schemas/lifeCap"
          },
          "lifeFloor": {
            "$ref": "#/components/schemas/lifeFloor"
          },
          "lockout": {
            "$ref": "#/components/schemas/lockout"
          },
          "lookback": {
            "$ref": "#/components/schemas/lookback"
          },
          "lookbackAdjustMeth": {
            "$ref": "#/components/schemas/lookbackAdjustMeth"
          },
          "lookbackCal": {
            "$ref": "#/components/schemas/lookbackCal"
          },
          "lookbackConv": {
            "$ref": "#/components/schemas/lookbackConv"
          },
          "lookbackType": {
            "$ref": "#/components/schemas/lookbackType"
          },
          "margin": {
            "$ref": "#/components/schemas/margin"
          },
          "mult": {
            "$ref": "#/components/schemas/mult"
          },
          "pdCap": {
            "$ref": "#/components/schemas/pdCap"
          },
          "pdFloor": {
            "$ref": "#/components/schemas/pdFloor"
          },
          "resetAdjust": {
            "$ref": "#/components/schemas/resetAdjust"
          },
          "resetCal": {
            "$ref": "#/components/schemas/resetCal"
          },
          "resetDelay": {
            "$ref": "#/components/schemas/resetDelay"
          },
          "resetDelayConv": {
            "$ref": "#/components/schemas/resetDelayConv"
          },
          "resetFreq": {
            "$ref": "#/components/schemas/resetFreq"
          },
          "resetFreqDtl": {
            "$ref": "#/components/schemas/resetFreqDtl"
          },
          "resetTerm": {
            "$ref": "#/components/schemas/resetTerm"
          },
          "spread": {
            "$ref": "#/components/schemas/spread"
          },
          "startDt": {
            "$ref": "#/components/schemas/startDt"
          },
          "stubType": {
            "$ref": "#/components/schemas/stubType"
          },
          "suspensionDayConv": {
            "$ref": "#/components/schemas/suspensionDayConv"
          },
          "suspensionDays": {
            "$ref": "#/components/schemas/suspensionDays"
          }
        },
        "required": [
          "endDt",
          "startDt"
        ],
        "type": "object"
      },
      "IbndDataRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/IbndDataRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "baseLevel": {
            "$ref": "#/components/schemas/baseLevel"
          },
          "baseLevelDate": {
            "$ref": "#/components/schemas/baseLevelDate"
          },
          "indexName": {
            "$ref": "#/components/schemas/indexName"
          },
          "indexPrecision": {
            "$ref": "#/components/schemas/indexPrecision"
          },
          "indexationPrecision": {
            "$ref": "#/components/schemas/indexationPrecision"
          },
          "indxLookback": {
            "$ref": "#/components/schemas/indxLookback"
          },
          "intFloor": {
            "$ref": "#/components/schemas/intFloor"
          },
          "interpolationType": {
            "$ref": "#/components/schemas/interpolationType"
          },
          "pricing": {
            "$ref": "#/components/schemas/pricing"
          },
          "prinFloor": {
            "$ref": "#/components/schemas/prinFloor"
          },
          "resetTerm": {
            "$ref": "#/components/schemas/resetTerm"
          }
        },
        "required": [
          "indexName",
          "indexPrecision",
          "indexationPrecision",
          "indxLookback",
          "intFloor",
          "interpolationType",
          "prinFloor"
        ],
        "type": "object"
      },
      "IndependentAmtRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/IndependentAmtRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "calcType": {
            "$ref": "#/components/schemas/calcTypeIndependentAmt"
          },
          "comment": {
            "$ref": "#/components/schemas/comment"
          },
          "indAmt": {
            "$ref": "#/components/schemas/indAmt"
          },
          "startDate": {
            "$ref": "#/components/schemas/startDate"
          },
          "stopDate": {
            "$ref": "#/components/schemas/stopDate"
          }
        },
        "required": [
          "calcType",
          "indAmt",
          "startDate",
          "stopDate"
        ],
        "type": "object"
      },
      "IssuerExchangeRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/IssuerExchangeRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "exchange": {
            "$ref": "#/components/schemas/exchange"
          }
        },
        "required": [
          "exchange"
        ],
        "type": "object"
      },
      "NotesRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/NotesRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "effDt": {
            "$ref": "#/components/schemas/effDt"
          },
          "instmt": {
            "$ref": "#/components/schemas/instmt"
          },
          "seqNum": {
            "$ref": "#/components/schemas/seqNum"
          },
          "userId": {
            "$ref": "#/components/schemas/userId"
          }
        },
        "required": [
          "effDt",
          "seqNum",
          "userId"
        ],
        "type": "object"
      },
      "OfferingDataRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/OfferingDataRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "concessionRate": {
            "$ref": "#/components/schemas/concessionRate"
          },
          "dateAnnounced": {
            "$ref": "#/components/schemas/dateAnnounced"
          },
          "datePriced": {
            "$ref": "#/components/schemas/datePriced"
          },
          "firmCommitment": {
            "$ref": "#/components/schemas/firmCommitment"
          },
          "offeringAmt": {
            "$ref": "#/components/schemas/offeringAmt"
          },
          "offeringId": {
            "$ref": "#/components/schemas/offeringId"
          },
          "offeringType": {
            "$ref": "#/components/schemas/offeringType"
          },
          "priceWire": {
            "$ref": "#/components/schemas/priceWire"
          },
          "requestedBy": {
            "$ref": "#/components/schemas/requestedBy"
          },
          "securityId": {
            "$ref": "#/components/schemas/securityId"
          },
          "subscriptionDeadline": {
            "$ref": "#/components/schemas/subscriptionDeadline"
          },
          "syndicateDataSet": {
            "properties": {
              "syndicateDataRecord": {
                "items": {
                  "$ref": "#/components/schemas/SyndicateDataRecord"
                },
                "type": "array"
              }
            },
            "required": [
              "syndicateDataRecord"
            ],
            "type": "object"
          },
          "underwritingGross": {
            "$ref": "#/components/schemas/underwritingGross"
          }
        },
        "required": [
          "dateAnnounced",
          "datePriced",
          "offeringId",
          "offeringType"
        ],
        "type": "object"
      },
      "PutCallRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/PutCallRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "dt": {
            "$ref": "#/components/schemas/dt"
          },
          "price": {
            "$ref": "#/components/schemas/price"
          },
          "type": {
            "$ref": "#/components/schemas/type"
          }
        },
        "required": [
          "dt",
          "type"
        ],
        "type": "object"
      },
      "RatchetCoeffcntValRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/RatchetCoeffcntValRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "ratchetCoeffcntType": {
            "$ref": "#/components/schemas/ratchetCoeffcntType"
          },
          "ratchetCoeffcntValue": {
            "$ref": "#/components/schemas/ratchetCoeffcntValue"
          }
        },
        "required": [
          "ratchetCoeffcntType",
          "ratchetCoeffcntValue"
        ],
        "type": "object"
      },
      "RatchetEventValRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/RatchetEventValRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "eventDt": {
            "$ref": "#/components/schemas/eventDt"
          },
          "eventLevel": {
            "$ref": "#/components/schemas/eventLevel"
          },
          "eventVal": {
            "$ref": "#/components/schemas/eventVal"
          }
        },
        "required": [
          "eventDt",
          "eventLevel",
          "eventVal"
        ],
        "type": "object"
      },
      "RatchetRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/RatchetRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "baselineCnvRatio": {
            "$ref": "#/components/schemas/baselineCnvRatio"
          },
          "currencyEvent": {
            "$ref": "#/components/schemas/currencyEvent"
          },
          "eventLevelUnit": {
            "$ref": "#/components/schemas/eventLevelUnit"
          },
          "eventValUnit": {
            "$ref": "#/components/schemas/eventValUnit"
          },
          "maxRatchetVal": {
            "$ref": "#/components/schemas/maxRatchetVal"
          },
          "maxRatchetValUnit": {
            "$ref": "#/components/schemas/maxRatchetValUnit"
          },
          "minRatchetVal": {
            "$ref": "#/components/schemas/minRatchetVal"
          },
          "minRatchetValUnit": {
            "$ref": "#/components/schemas/minRatchetValUnit"
          },
          "poisonPutAmount": {
            "$ref": "#/components/schemas/poisonPutAmount"
          },
          "poisonPutEndDt": {
            "$ref": "#/components/schemas/poisonPutEndDt"
          },
          "poisonPutTypeCode": {
            "$ref": "#/components/schemas/poisonPutTypeCode"
          },
          "typeCode": {
            "$ref": "#/components/schemas/typeCode"
          }
        },
        "required": [
          "baselineCnvRatio",
          "poisonPutTypeCode",
          "typeCode"
        ],
        "type": "object"
      },
      "RatingRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/ratings/Ratings.v1.json#/RatingRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "creditRating": {
            "$ref": "#/components/schemas/creditRating"
          },
          "effectiveDate": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "modifiedTimestampUtc": {
            "$ref": "#/components/schemas/modifiedTimestampUtc"
          },
          "ratingApplication": {
            "$ref": "#/components/schemas/ratingApplication"
          },
          "ratingSource": {
            "$ref": "#/components/schemas/ratingSource"
          }
        },
        "required": [
          "creditRating",
          "effectiveDate"
        ],
        "type": "object"
      },
      "RatingRecordSecMaster": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/RatingRecordSecMaster",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "agencyId": {
            "$ref": "#/components/schemas/agencyId"
          },
          "agy": {
            "$ref": "#/components/schemas/agencyId"
          },
          "date": {
            "$ref": "#/components/schemas/effectiveDate"
          },
          "value": {
            "$ref": "#/components/schemas/creditRating"
          }
        },
        "required": [
          "agencyId",
          "agy",
          "date",
          "value"
        ],
        "type": "object"
      },
      "RatingsByAgencyId": {
        "description": "The schema describing this entity.",
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/ratings/Ratings.v1.json#/RatingsByAgencyId",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "agencyId": {
            "$ref": "#/components/schemas/agencyId"
          },
          "rating": {
            "description": "Ratings Array Grouped Under AgencyId",
            "items": {
              "$ref": "#/components/schemas/RatingRecord"
            },
            "type": "array"
          }
        },
        "required": [
          "agencyId",
          "rating"
        ],
        "type": "object"
      },
      "RatingsByAssetId": {
        "description": "Entity representing this object.",
        "properties": {
          "assetId": {
            "$ref": "#/components/schemas/assetId"
          },
          "ratingsByAgencyId": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RatingsByAgencyId"
            },
            "description": "Ratings grouped by AgencyId",
            "type": "object"
          }
        },
        "required": [
          "assetId",
          "ratingsByAgencyId"
        ],
        "type": "object"
      },
      "ScheduleRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/ScheduleRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "accrualDateCust": {
            "$ref": "#/components/schemas/accrualDateCust"
          },
          "determDate1": {
            "$ref": "#/components/schemas/determDate1"
          },
          "determDate2": {
            "$ref": "#/components/schemas/determDate2"
          },
          "nextAccrualDate": {
            "$ref": "#/components/schemas/nextAccrualDate"
          },
          "payDate": {
            "$ref": "#/components/schemas/payDate"
          }
        },
        "required": [
          "determDate1"
        ],
        "type": "object"
      },
      "SecGroupSecTypeMap": {
        "description": "Aladdin Security mapped to <SECGROUP>_<SECTYPE> keys for e.g. 'BND_CORP', 'ABS_ABS', 'LOAN_TERM' ",
        "properties": {
          "additionalProperties": {
            "$ref": "#/components/schemas/AssetRecord"
          },
          "assetId": {
            "$ref": "#/components/schemas/assetId"
          }
        },
        "required": [
          "assetId"
        ],
        "type": "object"
      },
      "SecMasterData": {
        "description": "This returns information of multiple securities according to Security Master schema (Security Master from Aladdin).",
        "properties": {
          "assetByAssetId": {
            "additionalProperties": {
              "$ref": "#/components/schemas/SecGroupSecTypeMap"
            },
            "description": "A map of Aladdin® asset id to asset data, for each asset successfully retrieved.",
            "type": "object"
          },
          "errors": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorCode"
            },
            "description": "A map of Aladdin® asset id to an error, for each requested id that failed.",
            "type": "object"
          }
        },
        "required": [
          "assetByAssetId",
          "errors"
        ],
        "type": "object"
      },
      "SectorRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/SectorRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/sectorCode"
          },
          "level": {
            "$ref": "#/components/schemas/sectorLevel"
          },
          "sectorSource": {
            "$ref": "#/components/schemas/sectorSource"
          },
          "type": {
            "$ref": "#/components/schemas/sectorType"
          }
        },
        "required": [
          "code",
          "level",
          "type"
        ],
        "type": "object"
      },
      "SecurityRatingData": {
        "description": "Ratings Response Object.",
        "properties": {
          "errors": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorCode"
            },
            "description": "These are the Issuer Ids which were not processed.",
            "type": "object"
          },
          "ratingsByAssetId": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RatingsByAssetId"
            },
            "description": "Ratings by aladdin security id.",
            "type": "object"
          }
        },
        "required": [
          "errors",
          "ratingsByAssetId"
        ],
        "type": "object"
      },
      "SinkRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/SinkRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "date": {
            "$ref": "#/components/schemas/sinkDate"
          },
          "price": {
            "$ref": "#/components/schemas/price"
          }
        },
        "required": [
          "date"
        ],
        "type": "object"
      },
      "SmVectorDataRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/SmVectorDataRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "attrName": {
            "$ref": "#/components/schemas/attrName"
          },
          "attrPct": {
            "$ref": "#/components/schemas/attrPct"
          },
          "attrType": {
            "$ref": "#/components/schemas/attrType"
          },
          "startDate": {
            "$ref": "#/components/schemas/startDate"
          },
          "stopDate": {
            "$ref": "#/components/schemas/stopDateSmVectorData"
          }
        },
        "required": [
          "attrName",
          "attrType",
          "startDate"
        ],
        "type": "object"
      },
      "SyndicateDataRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/SyndicateDataRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "amtSold": {
            "$ref": "#/components/schemas/amtSold"
          },
          "amtUnderwritten": {
            "$ref": "#/components/schemas/amtUnderwritten"
          },
          "collatContribution": {
            "$ref": "#/components/schemas/collatContribution"
          },
          "dealer": {
            "$ref": "#/components/schemas/dealer"
          },
          "dealerRole": {
            "$ref": "#/components/schemas/dealerRole"
          },
          "feeUnderwriting": {
            "$ref": "#/components/schemas/feeUnderwriting"
          },
          "proceedsUsed": {
            "$ref": "#/components/schemas/proceedsUsed"
          }
        },
        "required": [
          "amtSold",
          "amtUnderwritten",
          "collatContribution",
          "dealer",
          "feeUnderwriting",
          "proceedsUsed"
        ],
        "type": "object"
      },
      "UDFRecord": {
        "properties": {
          "@type": {
            "default": "https://aladdin.io/model/security/securities/Securities.v1.json#/UDFRecord",
            "description": "The schema describing this entity.",
            "readOnly": true,
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/label"
          },
          "purpose": {
            "$ref": "#/components/schemas/fieldPurpose"
          },
          "udfSource": {
            "$ref": "#/components/schemas/fieldSource"
          },
          "value": {
            "$ref": "#/components/schemas/fieldValue"
          }
        },
        "required": [
          "label",
          "value"
        ],
        "type": "object"
      },
      "accrualDateCust": {
        "description": "Beginning of the accrual period for custom reset/payment schedules.",
        "format": "date-time",
        "type": "string"
      },
      "accrualDt": {
        "description": "Accrual Date (YYYY-MM-DD). The date on which the bond begins accruing interest. Note this affects only the first interest payment. Subsequent interest payments are unaffected by the accrual date.",
        "format": "date",
        "type": "string"
      },
      "accrualPeriod": {
        "description": "Defines if accrual periods: Include Start/Exclude End, Exclude Start/Include End, Include Both. The valid list of values can be found in the ACCR_PER_CONV decode.",
        "type": "string"
      },
      "accrualStartEnd": {
        "description": "Specifies if accrual calculation periods: Include 1st payment delay, Include All payment delays, Exclude payment delays. The valid list of values can be found in the ACCR_END_CONV decode.",
        "type": "string"
      },
      "affectivePriodEndDt": {
        "description": "Affected period end date",
        "format": "date-time",
        "type": "string"
      },
      "affectivePriodStartDt": {
        "description": "Affected period start date",
        "format": "date-time",
        "type": "string"
      },
      "agency": {
        "description": "Agency who issued the MBS. FG=Freddie Gold, FH=Freddie PC, GN=GNMA, G2=GNMA2, FN=Fannie, CA=CA. Use with PROG_CODE to determine the mortgage type. Calculated as first two chars of TICKER. See AGENCIES decode.",
        "type": "string"
      },
      "agencyId": {
        "description": "Aladdin's unique ID for a rating agency; e.g. 1=Moodys Primary, 2-SP Primary, 3=Fitch Primary, 21=Moodys Secondary, 22=SP Secondary, etc. These vary by agency, primary/secondary, outlook, domestic/foreign, underlying; see the 'RATING AGENCIES' decode for full list. Aladdin® assigns primary versus alternate credit ratings based upon Security Group and Security type as follows: If SEC_GROUP=CASH, then the short term credit rating is primary and long term rating is alternate, with two exceptions: CASH/APS and CASH/SAVR. All other types use the long term ratings as primary and short term as alternate. Examples: 1. Security Group/Security Type = CASH/CP , with Moody's ratings 'P-1' (short) and 'Aaa' (long): 'P-1' is primary Moody (RATING_AGY=1) and 'Aaa' is alternate Moody (RATING_AGY=21). 2. Security Group/Security Type = CASH/APS or BND/CORP, with Moody's ratings 'P-1' and 'Aaa': 'Aaa' is primary Moody (RATING_AGY=1), and 'P-1' is alternate Moody (RATING_AGY=21).",
        "type": "integer",
        "x-nicknames": "agency_id"
      },
      "aggregateCode": {
        "description": "Mortgage pool classification.  C=CONVERTED FROM NON-GOLD, F=FLEX, G=GIANT, M=MEGAPOOL, P=POOL, S=SUBPOOL, W=WAC. Full list of valid values is in the POOL_AGGR decode.",
        "type": "string"
      },
      "agreedDiscRt": {
        "description": "For swaptions, allows parties to specify a discount rate in swaption confirmation for which Cleared Physical Settlement or Collateralized Cash Price Cash Settlement Method is applicable.",
        "type": "string"
      },
      "allocMethod": {
        "description": "Method used to select a called bond in the event of a partial redemption (e.g.: entire or prorata, entire or partial, lottery, holder's option, etc.). The various method types are maintained in CONVERT_ALLOC",
        "type": "string"
      },
      "amount": {
        "description": "For sinking fund, this is the amount (original face, if applicable) redeemed on the sinking date. All sinking fund schedules must fully redeem the security. The last sink date is assumed to be the effective maturity of the bond.",
        "format": "double",
        "type": "number"
      },
      "amt": {
        "description": "Flag to designate if the bond is subject to the alternative minimum tax. Letter A means the bond is subject to AMT.  N, space, and null all mean the bond is not subject to AMT.",
        "type": "string"
      },
      "amtIsu": {
        "description": "The amount of money being borrowed by the issuer through a particular offering. Some munis have series-level issue amt and a smaller CUSIP-level issue amt aka maturity size, Aladdin doesn’t track former & tracks latter in AMT_ISU. e.g. 92812T4N8 has series-level $33,500,00 (not stored) & CUSIP-level $7,200,000 in AMT_ISU.",
        "format": "double",
        "type": "number"
      },
      "amtSold": {
        "description": "Amount an underwriter on the deal has sold of the amount underwritten",
        "format": "double",
        "type": "number"
      },
      "amtUnderwritten": {
        "description": "Amount an underwriter on the deal has underwritten",
        "format": "double",
        "type": "number"
      },
      "annexDt": {
        "description": "The most recent date of publication of the underlying basket of securities that make up a Credit Default Index. Credit default indices consist of ~125 names in a basket. The names in the index are republished on at least these occasions: (1) Every year or so, a new series of each index (called 1..2..3?4..5) is published with a new set of 125 companies to be in the index. (2) When a name defaults, it is removed from every applicable series and those series are republished. (3) Possibly for mergers and acquisitions or other reasons",
        "format": "date",
        "type": "string"
      },
      "announceDt": {
        "description": "The date that the security was initially announced and offered to the public. Can be equal to the issue date. For NDF and OHA FX contracts, this contains the Fixing Date of the NDF/OHA.",
        "format": "date",
        "type": "string"
      },
      "assetBenchmark": {
        "description": "For TBAs, standard CUSIP. For FX, currency in market convention e.g. GBPUSD and USDJPY. For CFDs, the underlying CUSIP. Munis: a Base Cusip so user can maintain credit enhancement and ratings on a single Base Cusip and assign that Base Cusip to multiple Muni CPs.",
        "type": "string"
      },
      "assetId": {
        "description": "Aladdin's unique ID for an asset. An asset ID may also be assigned to a portfolio or an index.",
        "type": "string",
        "x-nicknames": "asset_id, cusip"
      },
      "assetStatus": {
        "description": "For active securities, this tag will not be present. For inactive securities, this tag will say INACTIVE. How it works: Security Master GUI has an Asset Status field. Usually it stores only values that mean ?inactive?; e.g., DELISTED, FUNGED, and EXCHANGED/CONVERTED.  But sometimes it stores values that mean ?active.? The interface uses logic: If the Security Master GUI?s ?Asset Status? field (e.g. DELISTED) is in the decode (ASSET_STATUS) that lists all the inactive statuses, then ASSET_STATUS = INACTIVE. This sets all ?inactive? statuses (e.g. delisted, funged, converted, etc.) to INACTIVE; and it prevents any ?active? statuses from appearing",
        "type": "string"
      },
      "assetStatusType": {
        "description": "This tag supplements ASSET_STATUS. For active securities, this tag will not be present. For inactive securities, this tag will display the reason the security is inactive.The list of valid values for this field can be found in the ASSET_STATUS decode such as DELISTED and EXCHANGED/CONVERTED.",
        "type": "string",
        "x-enum-column": "code",
        "x-enum-source": "ASSET_STATUS"
      },
      "attachment": {
        "description": "Attachment Point.  % point at which tranche begins.",
        "format": "float",
        "type": "number"
      },
      "attachments": {
        "description": "Call(C),Put(P),Sink(S),Warrants(W),etc. Refer the ATTACHMENTS decode for the entire list of values",
        "type": "string"
      },
      "attrName": {
        "description": "The attribute name",
        "type": "string"
      },
      "attrPct": {
        "description": "The percentage value of the attribute",
        "format": "float",
        "type": "number"
      },
      "attrType": {
        "description": "The attribute type. For example, BNDTYP for bond type values",
        "type": "string"
      },
      "balance": {
        "description": "The remaining balance amount",
        "format": "float",
        "type": "number"
      },
      "balloon": {
        "description": "For mortgage pools, the number of months from issuance until the balloon payment, e.g. 60 for a 5-year balloon, 84 for a 7-year, etc. Note: Zero or null means not a balloon.",
        "format": "int32",
        "type": "integer"
      },
      "barrierEnd": {
        "description": "The barrier period end date.",
        "format": "date",
        "type": "string"
      },
      "barrierEvent": {
        "description": "Option style. UI=Barrier Up and In, UO=Barrier Up and Out, DI Barrier Down and In, DO=Barrier Down and Out, 2I=Barrier Double Knock In, 1T=Digital One Touch, IT Digital Instant One Touch, NT Digital No Touch, 2T=Digital Double Touch, etc. See decode BARRIER_EVENT",
        "type": "string"
      },
      "barrierLower": {
        "description": "Contains the option's lower knock-in level as a rate.",
        "format": "float",
        "type": "number"
      },
      "barrierSource": {
        "description": "Barrier fixing rate source.",
        "type": "string"
      },
      "barrierStart": {
        "description": "The barrier period start date.",
        "format": "date",
        "type": "string"
      },
      "barrierUpper": {
        "description": "Contains the option's higher knock-in level as a rate.",
        "format": "float",
        "type": "number"
      },
      "baseLeg": {
        "description": "Indicates which leg of a swap is the base.  P = Pay leg, R = Receive leg. Clients should be able to disregard this field.",
        "type": "string"
      },
      "baseLevel": {
        "description": "Used when base level CPI is not a standard lookback - actual CPI value",
        "format": "float",
        "type": "number"
      },
      "baseLevelDate": {
        "description": "Used when base level CPI is not a standard lookback - date of CPI value",
        "format": "date",
        "type": "string"
      },
      "baselineCnvRatio": {
        "description": "The conversion ratio on which the ratchet values are based",
        "format": "float",
        "type": "number"
      },
      "basketCusip": {
        "description": "For either a basket or index tranched credit default swap security this field contains a cusip, which is also a CDSWAP, that contains the list of underlying assets of the basket or index.",
        "type": "string"
      },
      "bondtype": {
        "description": "Bond structure. Over the life of security, BONDTYPE may change based upon market conditions. Valid values are: For ABS, see ABS_NAMES decode; for CMOs, see CMO_NAMES; for CMBS, see CMBS_NAMES. New BONDTYPES are created as new products enter market",
        "type": "string"
      },
      "calcType": {
        "description": "Calculation type used for BondCalc (mostly accrued interest). It is a field on the DES screen of every security on Bloomberg.  It is a number. Basically, any time there is a number value other than 1 on Bloomberg for this field, then DIG should populate it. You can find the definitions of all calc types on Bloomberg by typing \"CALC <HELP>\" and then \"9 <GO>\".  Scroll down until you get to the sought-after number. This is most common in foreign bonds which do not accrue interest in the traditional (simple) manner.",
        "format": "int32",
        "type": "integer"
      },
      "calcTypeIndependentAmt": {
        "description": "Independent Amount Calculation Type, i.e. absolute value or percent Controlled by decode IND_AMT_TYPE",
        "type": "string"
      },
      "callMandatory": {
        "description": "Yes/No flag to designate if the embedded call option is mandatory. Y or N.",
        "type": "string"
      },
      "callType": {
        "description": "Call option type. Values include: 'A' American, 'B' Bermudan, 'E' European, 'S' Asian. Full list of valid values is in the CALL_PUT_TYPE decode.  American calls can be called any time after the call date. European calls can only be called on the specified call dates. Bermudian calls can only be called on the payment dates and must have the full schedule of dates entered into Aladdin.",
        "type": "string"
      },
      "cap": {
        "description": "The maximum correction to the quantity defined by dprot_type_cd in the period defined by threshold_prd_cd.",
        "format": "float",
        "type": "number"
      },
      "capitalType": {
        "description": "Allocation of bond proceeds",
        "type": "string"
      },
      "cashAmt": {
        "description": "Cash amount of make whole",
        "format": "float",
        "type": "number"
      },
      "cashDecrement": {
        "description": "Cash amount by which the cash amount decrements -zero for constant cash",
        "format": "float",
        "type": "number"
      },
      "cashPmtAmt": {
        "description": "The amount the bondholder would receive from the issuer upon conversion. This field is populated if the bond is convertible into cash only",
        "format": "float",
        "type": "number"
      },
      "cashPmtCurrency": {
        "description": "Currency in which the cash payment amount is denominated. Currency values are maintained in B_CURRENCY",
        "type": "string"
      },
      "cashPmtDate": {
        "description": "The date the option payoff will be settled (paid) if cash settlement is applicable (EXERCISE_TYPE=CASH), and the option is exercised.",
        "format": "date",
        "type": "string"
      },
      "cashPmtFactor": {
        "description": "Factor applied to the cash received - usually 1",
        "format": "float",
        "type": "number"
      },
      "cashQuotation": {
        "description": "Quotation method. Valid values include \"B\" Bid, \"O\" - Offer and \"M\" - Market",
        "type": "string"
      },
      "cashThreshold": {
        "description": "The cash threshold as defined at issue.",
        "format": "float",
        "type": "number"
      },
      "cdInstmtType": {
        "description": "The CD_INSTMT_TYPE is a field in Aladdin that uses the Client?s security type rather than the Aladdin Security Group / Security Type convention.  This allows downstream Client systems to identify security groups that are already defined within the clientsystem.  For example, Aladdin knows a corporate bond as Security Group / Security Type ?BND / CORP?.   The Client may know the same bond as ?BOND? or ?CORPORATE BOND?.",
        "type": "string"
      },
      "cdsType": {
        "description": "If the security is a credit default swap this field contains the credit default type.  Examples are (S) single name (B) basket, (N) N-th to default etc.  For a full list of valid values see the CDS_TYPES decode.",
        "type": "string"
      },
      "changeDt": {
        "description": "Time of last change. Includes security reference fields (issue date, maturity date, etc.) and all child tables (factor, coupon, put/call schedule etc.) that are maintained in SecurityMaster. CHANGE_DT includes date and time, e.g. 11/4/2003 11:01:25.863.",
        "format": "date",
        "type": "string"
      },
      "city": {
        "description": "The city in which the property is located.",
        "type": "string"
      },
      "cleanUpPct": {
        "description": "The % remaining for clean-up calls",
        "format": "float",
        "type": "number"
      },
      "clearingOrg": {
        "description": "The code of the organization that acts as the central counterparty to clear the resulting trade created from the exercise of the option. (e.g. CME, LCH). The list of valid values can be found in the IRS_EXCHANGE or CDS_EXCHANGE decode depending on the security type.",
        "type": "string"
      },
      "cntry": {
        "description": "The ISO country code. \nAladdin's Interpretation of country will differ based on security type. For the majority of fixed income instruments, the country will primarily reflect the country of domicile of the issuing entity. If that value is not present via third party vendor feeds, the logic will default to the country of issue of the security. For equity instruments, the country field will reflect the country of domicile of the issuing entity.",
        "type": "string"
      },
      "cntrySrc": {
        "description": "The provider from whom the country classification was loaded. The complete list of valid values can be found in the ISS_CNTRY_SRC decode",
        "type": "string"
      },
      "cntryType": {
        "description": "The type of classification. Valid values include COR (Country of Risk), COI (Country of Issuance). The complete list of valid values can be found in the COUNTRY_CLASS decode",
        "type": "string"
      },
      "cnvChgRsnCd": {
        "description": "Field showing the reason for the change in conversion terms within the conver_sched table.",
        "type": "string"
      },
      "cnvGrpCode": {
        "description": "Code representing the major convertible exchangeable type.",
        "type": "string"
      },
      "cnvRatioCap": {
        "description": "The conversion ratio cap, following the application of the Incremental Share Factor",
        "format": "float",
        "type": "number"
      },
      "cnvStructCd": {
        "description": "Code representing the conversion structure type",
        "type": "string"
      },
      "cnvSubGrpCode": {
        "description": "Code representing the major sub type of the issue (specifically,Convertible, Preference Share or Mandatory)",
        "type": "string"
      },
      "code": {
        "description": "Each CODE identifies a type of alternate ID. These alternate IDs appear in the Public Identifiers section of SecurityMaster and in the CUSIP2 XML sub-record. For example, I=ISIN, C=SEDOL, D=Fed Desc, n=Private Placement Number, N=CINS, v=LIN. Full list of valid values is in the B_ALIAS decode. Note: R=Reuters Internal ID, but this is not the commonly known RIC code; rather, it is a 16-digit hexadecimal number, for example 0x000244000222badc or 0x0002a0000c1156e9 that is populated automatically by Reuters/EJV feed and should not be of interest to clients.",
        "type": "string"
      },
      "collatContribution": {
        "description": "Percentage of collateral contributed to the pool by an affiliate",
        "format": "double",
        "type": "number"
      },
      "collateral": {
        "description": "Collateral underlying the structured deal. Information is captured in free form text using a standard convention. These conventions as well as the underlying collateral for any given deal might change over time based upon market conditions. For ABS securities this field identifies the type of credit enhancement/support that backs the bond. For CMOs, this field refers to the actual underlying pools which collateralize the bond.",
        "type": "string"
      },
      "comment": {
        "description": "Any particular comment the user records for this list assignment",
        "type": "string"
      },
      "compoundFlag": {
        "description": "For securities which reset more frequently than they pay, this flag indicates whether the interest earned (but not yet paid) in the period before the reset date is included in the accrued interest calculation for the period after the reset date. For example, if a security resets quarterly but pays annually and this flag is set to '1', the interest earned in Q1 earns interest in Q2. If the flag is set to '0', the interest earned in Q2 would be just on the principal and would not include unpaid interest earned in Q1. Value of '1' indicates this compounding behavior; value of '0' means no compounding.",
        "format": "int32",
        "type": "integer"
      },
      "concessionRate": {
        "description": "Percent of the total trade value that entire syndicate will receive as a fee",
        "format": "double",
        "type": "number"
      },
      "conditional": {
        "description": "Conditions associated with the credit enhancement. Valid values include: 'D' Direct Unconditional, 'E' Direct Conditional, 'S' Standby Unconditional and 'T' Standby Conditional. Direct and Standy refers to the flow of any payment:\n•\tDirect - The trustee goes to the enhancer for payment. The issuer then reimburses the enhancer.\n•\tStandby - The trustee goes first to the issuer. If the issuer is unable to make full payment on its own, the enhancer (\"standing by\") comes in and makes the payment.\nConditional and unconditional refers to whether or not there are \"outs\" for the enhancer.\n•\tConditional - The enhancer provides liquidity enhancements only.\n•\tUnconditional - The enhancer provides full credit enhancement.",
        "type": "string"
      },
      "conduit": {
        "description": "Yes/No flag to designate if a municipal security is being issued by a taxable corporation which is contributing to some special municipal project in order to reap tax benefits. Y or N.",
        "type": "string"
      },
      "contingentOptionNum": {
        "description": "Each conversion period (as defined at issue) will have a coco_leg_nm allocated in the convert_terms view. This will allow the terms recorded in this view to be linked to the appropriate coco details for the period. A NULL value of coco_leg_nm would indicate a non-contingent conversion.",
        "format": "int32",
        "type": "integer"
      },
      "contingentRatingTriggCd": {
        "description": "Multiple Rating Trigger Logic",
        "type": "string"
      },
      "contingentTriggType": {
        "description": "CoCo Trigger Type Code",
        "type": "string,"
      },
      "contractMonth": {
        "description": "Contract month.",
        "format": "int32",
        "type": "integer"
      },
      "contractPointValue": {
        "description": "For dollar-based future or option/future contract, the change in $value for 1-point change in contract value. Dollar value of a point. If non-dollar, then change in other currency per point. Not in SM GUI. Stored in reference tables in Aladdin.",
        "format": "float",
        "type": "number"
      },
      "contractSize": {
        "description": "Underlying face amount of each contract.",
        "format": "float",
        "type": "number"
      },
      "contractTickerPfx": {
        "description": "The market standard ticker prefix, e.g. TY for US 10-year Treasury. See also TICKER_PFX.",
        "type": "string"
      },
      "contractYear": {
        "description": "Contract year",
        "format": "int32",
        "type": "integer"
      },
      "contractualRecovery": {
        "description": "Recovery rate specified by the contract. The amount the protection seller expects to recover in the event a default occurs.",
        "format": "float",
        "type": "number"
      },
      "convCurrency": {
        "description": "Deprecated.  Use CONVERT_TERMS and CONVERT_SCHED vectors instead. ISO currency code of the security that is received on conversion",
        "type": "string"
      },
      "convCusip": {
        "description": "Deprecated.  Use CONVERT_TERMS and CONVERT_SCHED vectors instead. Aladdin unique identifier of the security that is received on conversion",
        "type": "string"
      },
      "convDesc": {
        "description": "Deprecated.  Use CONVERT_TERMS and CONVERT_SCHED vectors instead. General description of the conversion security (e.g. 'Common Stock').",
        "type": "string"
      },
      "convFreq": {
        "description": "Deprecated.  Use CONVERT_TERMS and CONVERT_SCHED vectors instead. The frequency of the conversion.",
        "format": "int32",
        "type": "integer"
      },
      "convPrice": {
        "description": "Deprecated.  Use CONVERT_TERMS and CONVERT_SCHED vectors instead. The price of the conversion.",
        "format": "float",
        "type": "number"
      },
      "convShares": {
        "description": "Deprecated.  Use CONVERT_TERMS and CONVERT_SCHED vectors instead. Number of shares of the conversion security",
        "format": "float",
        "type": "number"
      },
      "convType": {
        "description": "Deprecated.  Use CONVERT_TERMS and CONVERT_SCHED vectors instead. Conversion type. XB=Exchangeable into bond of different issuer, XE=Exchangeable into equity of different issue,  XC=Complex exchangeable, CB=Convertible into bond of issuer, CE =Convertible into equity of issuer, CC=Complex. See CONVERT_TYPE decode.",
        "type": "string"
      },
      "conversionType": {
        "description": "Each conversion option will have its own conversion type, e.g.: convertible into currency, an index, a basket, debt of the issuer, debt of a different issuer, etc. The various conversion types are maintained in CONVERT_TYPE",
        "type": "string"
      },
      "convertEnd": {
        "description": "Date when conversion ends.",
        "format": "date",
        "type": "string"
      },
      "convertStart": {
        "description": "Date when conversion occurs.",
        "format": "date",
        "type": "string"
      },
      "convertibilityFlag": {
        "description": "Convertibility Flag",
        "type": "string"
      },
      "convertibleFlag": {
        "description": "Convertible flag - either 1 or 0. 1 designates that the pool is convertible, 0 designates that the pool is not convertible.",
        "format": "int32",
        "type": "integer"
      },
      "correctCashThreshold": {
        "description": "The cash threshold corrected for corporate action on the underlying stock.",
        "format": "float",
        "type": "number"
      },
      "country": {
        "description": "This is a two-character ISO country code, e.g. US, GB, etc. Aladdin's Interpretation of country will differ based on security type. For the majority of fixed income instruments, the country will primarily reflect the country of domicile of the issuing entity. If that value is not present via third party vendor feeds, the logic will default to the country of issue of the security. For equity instruments, the country field will reflect the country of domicile of the issuing entity.",
        "type": "string"
      },
      "coupon": {
        "description": "For SWAP/FRA, this is the initial rate of the agreement (the fixed rate). SWAP/FRA can contain both a COUPON and FLOATER element, as a COUPON and FLOATER panel are needed in order to calculate the final maturity payment for the FRA.",
        "format": "float",
        "type": "number"
      },
      "couponCalcMethod": {
        "description": "Represents the method used to calculate the interest rate payable for each interest payment period.  Valid values are defined in theCOUP_CALC_MTHD decode and include:\nCOMP - Compounding (Spread Included)\nFLCP - Flat Compounding\nSSCP - Simple Spread Compounding (Deferred Spread)\nWAVG - Weighted Average",
        "type": "string"
      },
      "couponFloat": {
        "description": "The current coupon for floating rate coupons. For fixed coupons see COUPON_FIX. To see the coupon type, see CPN_TYPE. Depending on CPN_TYPE, either COUPON_FLOAT or COUPON_FIXED should be used. It is not available for bonds with floating coupons. For those, coupon file should be used.",
        "format": "float",
        "type": "number"
      },
      "couponTypeConversion": {
        "description": "Specifies the coupon type change in the event of an exchangeable debt conversion, e.g.: convert from a floating rate to another floating rate, from a fixed rate to another fixed rate, from a floating rate to a fixed rate, or from a fixed rate to a floating rate. The various rate-change types are maintained in CONVERT_EXCH",
        "type": "string"
      },
      "covenantType": {
        "description": "Defines whether covenants are tested at the incurrence of specific actions by the borrower (paying a dividend, making an acquisition, issuing more debt, etc.) or are more regularly maintained throughout the life of the loan. The valid list of values can be found in the COVENANT_TYPES decode.",
        "type": "string"
      },
      "covenants": {
        "description": "The number of covenants associated with the loan.",
        "format": "int32",
        "type": "integer"
      },
      "cpn": {
        "description": "The coupon rate as of the indicated date - A bond's annual rate of interest, expressed as a percentage of the bond's face value.",
        "format": "float",
        "type": "number",
        "x-nicknames": "coupon"
      },
      "cpnEffectiveDate": {
        "description": "The effective date of this coupon taking into account payment delay. To derive the actual accrual date of the coupon, the END_ADJ_FLAG, PMT_ADJ_METH, and PMT_CAL must also be taken into account. Examples: Bond ABC has a coupon date of Saturday and PMT_ADJ_METH of 'F' and END_ADJ_FLAG of 'N'. The result would be a payment date of Monday (the next busines day), but the bond would begin accruing the next payment on Saturday (END_ADJ_FLAG of 'N'). (YYYY-MM-DD)",
        "format": "date",
        "type": "string"
      },
      "cpnSource": {
        "description": "Coupon source. M=Manual, Y=Moody’s, D=DTC, U=Muller, etc. See REMIT_SOURCE decode.  Or BRM=calculated by Aladdin's Bulk Reset Mechanism. Or user ID who updated the coupon. Some securities have a floating coupon which Aladdin should automatically calculate or attempt to calculate based on the information in the floater panel, e.g.\n1.\tSwaps floating off an index such as LIBOR\n2.\tPrivate-issue corporate bonds floating off an index\n3.\tTerm loans floating off LIBOR etc.\n4.\tAuction resets\nFor these, choose \"Bulk Reset (Internal).\" Aladdin will then calculate the coupons based on the underlying index and spread. For auction resets, Aladdin will calculate the auction schedule.\n*OR* If the security resets more frequently than it pays (e.g. reset weekly, pay semi-annually), then choose \"Bulk Reset Internal.\"\nFor all other floating securities, choose \"External Download.\" This covers floaters available from EJV. This also covers non-index, non-auction floaters that are not available from EJV and therefore must be manually input into Security Master. \"External download\" means simply that Aladdin will not attempt to calculate the coupons for this security.",
        "type": "string",
        "x-nicknames": "couponSource"
      },
      "cpnType": {
        "description": "Cpn type, 1-char. F = FIXED and MAT. T = FLOAT. Z = ZERO. N/A is null. Note, FLOAT includes any type that changes over the life of the security, including step-ups. \nWhether the security will pay a fixed coupon rate (\"FIXED\"), change during the life of the bond (\"FLOAT\"), pay interest only at maturity (\"MAT\"), or pay no interest at all (\"ZERO\"). If a security ever changes its rate, it should be float; e.g., a step-up (5, 5.5, 6, 6.5) should be float.",
        "type": "string"
      },
      "creditEnhType": {
        "description": "Type of credit enhancement, e.g. I=Insurance, L=Letter of Credit, P=Standby Purchase Agreement, G=Guarantor, etc. Full list of valid values is in the CE_TYPES decode.",
        "type": "string"
      },
      "creditEnhanceFee": {
        "description": "Fee paid to the credit enhancer, expressed as a percent. For example, 45 basis points is recorded as 0.45. This is applied to the Floater Orig Face. Aladdin can then subtract the fee from each coupon payment.",
        "format": "float",
        "type": "number"
      },
      "creditRating": {
        "description": "The credit rating value",
        "type": "string",
        "x-nicknames": "value"
      },
      "crossCurrencyFlag": {
        "description": "A y/n flag indicating if the bonds principal currency is different from that of the underlying asset.",
        "type": "string"
      },
      "currency": {
        "description": "The currency's ISO code, e.g. USD, EUR, NOK, SGD, etc. This is widely available externally. For list in Aladdin, see the B_CURRENCY decode.",
        "type": "string"
      },
      "currencyEvent": {
        "description": "The currency on which the event level is set - usually underlying currency",
        "type": "string"
      },
      "cusipPay": {
        "description": "Cusip of the first leg of the swap.",
        "type": "string"
      },
      "cusipReceive": {
        "description": "Cusip of the second leg of the SWAP.",
        "type": "string"
      },
      "cusipSwapAmort": {
        "description": "For amortizing swaps, this is the underlying amortization security ID for the swap. The notional face amount of the swap pays down in exactly the same manner as the designated amortization security. For CDS, this is the specified reference security ID. This is used to determine pari passu status of deliverable obligation. Although CDX are not linked to a reference obligation, a dummy security is used as a placeholder",
        "type": "string"
      },
      "cusipType": {
        "description": "Is the CUSIP a valid CUSIP, PPN, or DUMMY. This is calculated based on the CUSIP pattern and CURRENCY, following SnP CUSIP Bureau guidelines (see www.cusip.com). CUSIP: The CUSIP has a CUSIP pattern (chars 1-2 not 99; chars 1-3 numeric; chars 4-6 numeric or alpha or both; chars 7-8 numeric or alpha or both; char 9 numeric) and currency is USD. PPN: The CUSIP meets the PPN pattern (chars 1-2 not 99; chars 1-3 numeric; chars 4-5 numeric or alpha or both; chars 6-7-8 numeric or alpha or both; special PPN character; char 9 numeric) and currency is USD. DUMMY: Neither of the above. e.g. it starts with a B or any other letter, it starts with 99, it is not USD currency, etc. \nIf a bona fide, S&P-issued CUSIP is available, it is used. Such true CUSIPs start with numbers.\nIf no true CUSIP is available, Aladdin uses an internal CUSIP. Internal CUSIPs start with letters. Aladdin internal CUSIPs are usually B-CUSIPs (first letter B, followed by a sequential counter).\nOther Aladdin conventions:\n•\tSecurities with a SEDOL but no true CUSIP may use S-CUSIPs: S plus SEDOL plus check-digit.\n•\tFutures use ticker plus maturity year plus check digit, e.g. TYH320039.\n•\tAllocation pools use T-CUSIPs.",
        "type": "string"
      },
      "custodianFee": {
        "description": "Fee paid to the remarketing agent, expressed as a percent. For example, 10 basis points is recorded as 0.10. This is applied to the Floater Orig Face. Aladdin can then subtract the fee from each coupon payment (under development). Note: If the custodian fee applies to the Underlying Face instead of the Floater Orig Face, then back into a fee rate that, when multiplied by the *Floater* Orig Face, will give the correct fee.",
        "format": "float",
        "type": "number"
      },
      "date": {
        "description": "The date that this sink occurs. The *last* sink date reflects the last date any principal is paid to the bondholder.  If the last sink date is before maturity, the final sink date is the effective maturity of the bond.",
        "format": "date",
        "type": "string"
      },
      "dateAnnounced": {
        "description": "The start of the new issue period",
        "type": "string"
      },
      "dateConv": {
        "description": "Day-count convention. 30E360, 30P360, AC365L, ACT360, ACT365, ACT366, ACTACT, C30360, D30360, N30360, BUS252, and N/A. Note, XML values <> GUI values, D30/360 in SM GUI is D30360. See DAY_COUNTS decode for translation and SM Help File for definitions.\nThe method by which days per period, and days per year, are calculated for accrued interest, coupon payments, and yield-to-maturity. For example, fixed-rate corporate bonds usually count 30 days per month and 360 days per year (D30/360).\n•\tD30/360: This is the basic 30/360 which means every month is assumed to have 30 days and every year is assumed to have 360 days.\n•\tC30/360: A variation of D30/360 in how it treats February.\n•\t30E/360: A variation of D30/360 in how it treats months with 31 days. This is denoted as ISMA-30/360 on Bloomberg.\n•\tACT/360: Actual days for every month. Every year is assumed to have 360 days. Common for floating corporates.\n•\tACT/365: Actual days for every month. Every year is assumed to have 365 days.\n•\tACT/366: Actual days for every month. Every year is assumed to have 366 days. This is not used very often.\n•\tACT/ACT: ACT/ACT ISDA. Uses actual number of days in the year and splits the period if it spans both a regular year and leap year. Used for MVRDN's and in certain markets such as Canada.\n•\tACT/TSY: ACT/ACT ISMA. Uses the number of days in current period * coupon frequency do define total days in year. i.e. 182 days in period on a S/A bond would use 364 (182*2) days in year. Common on US treasuries.",
        "type": "string"
      },
      "datePriced": {
        "description": "The pricing date",
        "format": "date-time",
        "type": "string"
      },
      "daysInPeriod": {
        "description": "The number of days within a hurdle period that must be elapsed after an asset has exceeded the hurdle value in order to trigger the hurdle",
        "format": "int32",
        "type": "integer"
      },
      "daysInPeriodConv": {
        "description": "The day convention associated with days_in_period. B = Business days, C = Calendar Days. Day conventions are maintained in CALENDAR_TYPE",
        "type": "string"
      },
      "daysToReg144a": {
        "description": "Indicates the number of days from the 144a bond's issue date in which the issuer will make best efforts to initiate an exchange offer of registered bonds with the SEC.",
        "format": "int32",
        "type": "integer"
      },
      "dbtTriggRatio": {
        "description": "Debt Trigger Ratio",
        "format": "float",
        "type": "number"
      },
      "deal": {
        "description": "Structured security deal number (e.g. FHLMC_1500).",
        "type": "string"
      },
      "dealAmount": {
        "description": "Total amount issued for CMO deals, whole muni issues baskets.  Corresponds to the Deal Amount in SecurityMaster for munis and CMOs, and the Global Facility Amount for loans.",
        "format": "float",
        "type": "number"
      },
      "dealer": {
        "description": "The Aladdin broker code for the underwriter on the deal",
        "format": "date",
        "type": "string"
      },
      "dealerRole": {
        "description": "Describes the role the dealer played in the deal. Valid values include Co-Manager, Discretionary, Lead Manager, etc. The full list of valid values can be found in the DEALER_ROLE decode.",
        "type": "string"
      },
      "decliningPrem": {
        "description": "A method by which a Prepayment Premium is calculated by multiplying the principal being prepaid by a stated percentage that declines over the life of the mortgage loan, resulting in a lower prepayment premium over time.",
        "type": "string"
      },
      "decrFreqCd": {
        "description": "The frequency of cash decrement",
        "format": "int32",
        "type": "integer"
      },
      "defeasanceLockoutTerm": {
        "description": "The number of months the borrower is prohibited from  defeasing the loan",
        "format": "int32",
        "type": "integer"
      },
      "delay": {
        "description": "The difference in days between the pay date and the end of the accrual period.",
        "format": "int32",
        "type": "integer"
      },
      "delayConv": {
        "description": "Delay convention used to compute interest payments.  Valid values include 'B' (business), 'C' (calendar).",
        "type": "string"
      },
      "deliveryDate": {
        "description": "Delivery date of an option, which is when the underlying security must be delivered. Usually two business days after the option expiry date.",
        "format": "date",
        "type": "string"
      },
      "deliveryMethod": {
        "description": "Indicates whether a futures contract is cash-settled or settled via a physical delivery. C=Cash-settled, P=Physical delivery",
        "type": "string"
      },
      "descInstmt": {
        "description": "Free form text description of the security. This, CUSIP, and ticker are the primary fields by which a security is identified on a PMS report. Desc often contains issuer name and descriptive info about the specific security, e.g. the specific series or class which was bought, etc. There are different conventions by security group/type. Although the loading will not fail when the field is not included or the field value is blank, client should send the information to ensure the proper loading of positions.",
        "type": "string"
      },
      "descInstmt2": {
        "description": "Additional description. For CMOs, the tranche. Or free-form text, or picklist from decodes such as CORP_CLASSES, BNDLOCAL_CLASS, CD_TD_CLASS, CLC_TYPES, CP_CLASSES, FUND_TYPE, POOL_TYPES, REPO_TYPE, TFN_CLASSES, and TPR_COLL_TYPES. For BND/GOVT securities, DESC_INSTMT2 is the Class.",
        "type": "string"
      },
      "detachment": {
        "description": "Detachment Point.  % point at which the tranche ends.",
        "format": "float",
        "type": "number"
      },
      "determDate1": {
        "description": "Reset at the beginning of the period for custom reset/payment schedules.",
        "format": "date-time",
        "type": "string"
      },
      "determDate2": {
        "description": "Reset at the End of the period for custom reset/payment schedules.",
        "format": "date-time",
        "type": "string"
      },
      "dfltThreshold": {
        "description": "Default Requirement.",
        "type": "string"
      },
      "diffSettleCurrency": {
        "description": "If the settlement currency is different from the face value currency, this field contains the settlement currency.",
        "type": "string"
      },
      "dilutionProtection": {
        "description": "Specifies if there is full, partial, or no dilution protection. The protection provisions are maintained in CONVERT_PROTECT decode.",
        "type": "string"
      },
      "disputeResolution": {
        "description": "The ISDA Dispute Resolution Guidelines will be incorporated by reference into the relevant credit derivative transaction.",
        "type": "string"
      },
      "divCcy": {
        "description": "Payout currency for income payments. Default = performance ccy",
        "type": "string"
      },
      "divFraction": {
        "description": "Specifies what part of the income is paid to accommodate tax and other withholding provisions.",
        "format": "float",
        "type": "number"
      },
      "dlvAddSpecific": {
        "description": "If Yes, include specific CUSIPs in the Notes field.",
        "type": "string"
      },
      "dlvAssignLoan": {
        "description": "A loan that can be assigned or novated either (a) to any third party, or (b) at a minimum, to commercial banks and financial institutions that are not then a lender or a member of the relevant lending syndicate without the consent of the relevant Reference Entity or guarantor.",
        "type": "string"
      },
      "dlvBearer": {
        "description": "Any obligation that is a bearer instrument unless interests with respect to such bearer obligation are cleared via the Euroclear system, Cedel Bank or any other internationally recognized clearing system.",
        "type": "string"
      },
      "dlvConsentLoan": {
        "description": "A loan that is capable of being assigned or novated with the consent of the relevant Reference Entity or the guarantor.",
        "type": "string"
      },
      "dlvContingent": {
        "description": "Any obligation (a) the payment or repayment of principal in respect of which is in an amount determined by reference to any formula or index, or which is subject to any contingency, and (b) which bears interest at either a fixed or floating rate that is paid on a periodic basis and computed on a benchmark interest rate plus or minus a spread, if any. Usually excludes convertible bonds.",
        "type": "string"
      },
      "dlvDirectLoan": {
        "description": "A loan in respect of which the Buyer is capable of creating in favor of the Seller a contractual right pursuant to a Participation that provides seller with recourse to the participation seller for a specified share in any payments due under the relevant loan which are received by such participation seller.",
        "type": "string"
      },
      "dlvDomCurrency": {
        "description": "The currency in which the security is denominated.",
        "type": "string"
      },
      "dlvDomIssuance": {
        "description": "Any obligation that was, at the time the relevant obligation was issued (or reissued) or incurred, intended to be offered for sale primarily in the domestic market of the relevant Reference Entity.",
        "type": "string"
      },
      "dlvDomLaw": {
        "description": "Any obligation that is governed by the laws of (a) the relevant Reference Entity (if sovereign), or (b) the jurisdiction of organization of the relevant Reference Entity (if not sovereign).",
        "type": "string"
      },
      "dlvExcludeSpecific": {
        "description": "If \"Yes\", include specific CUSIPs in the Notes field.",
        "type": "string"
      },
      "dlvIndirectLoan": {
        "description": "Indirect Loan Participant Flag.",
        "type": "string"
      },
      "dlvListed": {
        "description": "Any obligation that is quoted, listed or ordinarily purchased and sold on an exchange.",
        "type": "string"
      },
      "dlvMatured": {
        "description": "Accelerated or Matured: An obligation under which the total amount owed is due and payable in full in accordance with the terms of such obligation.",
        "type": "string"
      },
      "dlvMaxMaturity": {
        "description": "An obligation that has a remaining maturity from the physical settlement date of not greater than the period specified in the related confirmation. This field is in years.",
        "format": "float",
        "type": "number"
      },
      "dlvParipassu": {
        "description": "Any obligation that ranks at least pari passu with the most senior Reference Obligation in priority of payment.",
        "type": "string"
      },
      "dlvRestructMatLimit": {
        "description": "Restructuring Maturity Limitation: The date that is the earlier of (a) 30 months following the restructuring date, and (b) the latest final maturity date of any restructured bond or loan.",
        "type": "string"
      },
      "dlvSovereign": {
        "description": "Any obligation that is primarily owed to a Sovereign or Supranational Organization, including obligations referred to as Paris Club Debt.",
        "type": "string"
      },
      "dlvSpecCurrency": {
        "description": "Any obligation that is payable in the currency or currencies specified in the related confirmation.",
        "type": "string"
      },
      "dlvTransferable": {
        "description": "An obligation that is transferable to institutional investors without any contractual, statutory or regulatory restriction.",
        "type": "string"
      },
      "dprotAccTypeCode": {
        "description": "Code defining how small changes to the conversion price are implemented if the change does not exceed the Accumulation Threshold.",
        "type": "string"
      },
      "dprotCalcMethod": {
        "description": "Code representing the method by which the amount of compensation is calculated.",
        "type": "string"
      },
      "dprotDirection": {
        "description": "Code that indicates whether change to the conversion price/ratio will always increase the conversion value of the bond, or whether reductions in the conversion ratio are possible if the dividend threshold is not exceeded.",
        "type": "string"
      },
      "dprotEqualDiv": {
        "description": "Code indicating which dividends are included for dividend protection.",
        "type": "string"
      },
      "dprotScaleFactor": {
        "description": "The percentage value of any factor applied in the Dividend Protection Calculation Method",
        "format": "float,",
        "type": "number"
      },
      "dprotStockPriceDays": {
        "description": "Defines the number of business or trading days used in the compuation of the stock price",
        "format": "float",
        "type": "number"
      },
      "dprotStockPriceEndDays": {
        "description": "Defines the number of days prior to the reference date specified by Div Prot Stock Price End Date, that stock price averaging ends",
        "format": "float",
        "type": "number"
      },
      "dprotStockPriceEndDt": {
        "description": "Code defining the date relative to which the stock price averaging is related.",
        "type": "string"
      },
      "dprotStockPriceMethod": {
        "description": "Code defining the stock price used in computing stock value.",
        "type": "string"
      },
      "dprotTypeCode": {
        "description": "This defines the way in which the bondholder is compensated.",
        "type": "string"
      },
      "drCusip": {
        "description": "The cusip that the depository receipt represents",
        "type": "string"
      },
      "drRatio": {
        "description": "The amount of dr_cusip that a single dr represents.",
        "format": "float",
        "type": "number"
      },
      "drType": {
        "description": "Depository receipt type, e.g. Y=Depository Receipt, A=American Depository Receipt, B=American Depository Shares, E=European Depository Receipt, F=European Depository Shares, G=Global Depository Receipt, etc. See the DR_TYPE decode",
        "type": "string"
      },
      "drdEligible": {
        "description": "Dividend Received Reduction. If eligible, the stock is subject to a 70% tax reduction for U.S. holders, if held for the minimum holding period, which can vary.",
        "type": "string"
      },
      "dscr": {
        "description": "Debt service coverage ratio. The ratio of the current year Net Operating Income (NOI) of a mortgaged property on an annualized basis to the total annual principal and interest payments due on the related mortgage loan (debt service).",
        "format": "float",
        "type": "number"
      },
      "dt": {
        "description": "Date that the security is puttable or callable at that <PRICE>.",
        "format": "date",
        "type": "string"
      },
      "earningThreshold": {
        "description": "The earnings per share threshold, stated as a percentage.",
        "format": "float",
        "type": "number"
      },
      "effDt": {
        "description": "Date that this record was input to Aladdin.",
        "format": "date",
        "type": "string"
      },
      "effectiveDate": {
        "description": "Effective date of this record. (YYYY-MM-DD)",
        "format": "date",
        "type": "string"
      },
      "endAdjFlag": {
        "description": "Y/N, do accrual days adjust if end date is non-business day. Use w/ PMT_ADJ_METHOD. E.g. Calcd pmt=Saturday, end_adj_flag=Y, pmt_adj_method=(F)ollowing, then pay Monday & accruals start Monday. If end_adj_flag=N, then pay Monday & accrual starts Saturday. \n\"End Adjust\" determines whether the accrual period adjusts to the payment period. This affects payments where the payment date is modified due to a weekend or holiday. For example, if payment date is Saturday, and Payment Adjust Method is FOLLOWING, then the payment will be made on Monday. But with how many days interest? If End Adjust is checked, the payment will be received Monday with two extra days of interest (accrual period adjusts to the longer payment period). If End Adjust is not checked, the payment will be received Monday with NO extra days of interest (accrual period does not adjust, though the payment does).\nIf this value is not available from data provider, here are trends that we have observed: (1) LIBOR and other \"BOR\" floaters with a day count of ACT/360 are usually end adjusted, (2) LIBOR and other \"BOR\" floaters with 30/360 are only rarely end adjusted;  (3) Auction-reset securities are usually end adjusted. Bloomberg does not show whether interest is end adjusted, but you can discover the answer by comparing accrued interest between BlackRock TES and Bloomberg BXT for a settlement date that is a holiday. or MVRDNs, you can figure out the answer from the MFLD screen of MVRDNs.\nFor End Adj to be available, one must set the Payment Adjustment Method field to any value other than \"No Adjustment\".",
        "type": "string"
      },
      "endDate": {
        "description": "End date of a record.",
        "format": "date",
        "type": "string"
      },
      "endDt": {
        "description": "Ending date. For floater panels, if there is only one floater panel, then its end date is the security's maturity date. If more than one floater panel, then the end date of one is the start date of the next one.",
        "format": "date",
        "type": "string"
      },
      "eqtResetN1": {
        "description": "Trigger Offset",
        "format": "int32",
        "type": "integer"
      },
      "eqtResetN2": {
        "description": "Conversion Offset",
        "format": "int32",
        "type": "integer"
      },
      "eqtResetPeriod": {
        "description": "Time Between Equity Condition Resets",
        "format": "int32",
        "type": "integer"
      },
      "eqtResetPeriodCalCode": {
        "description": "Coco Reset Year Type",
        "type": "string"
      },
      "eqtResetType": {
        "description": "Linkage",
        "type": "string"
      },
      "eqtTriggCode": {
        "description": "Equity Trigger",
        "type": "string"
      },
      "eqtTriggInc": {
        "description": "Equity Trigger Increment",
        "format": "float",
        "type": "number"
      },
      "eqtTriggIncPeriodCode": {
        "description": "Equity Trigger Increment Period",
        "type": "string"
      },
      "eqtTriggKnockin": {
        "description": "Equity Trigger Knock-in",
        "type": "string"
      },
      "eqtTriggOutofDays": {
        "description": "Equity Trigger Out of Days",
        "format": "int32",
        "type": "integer"
      },
      "eqtTriggSampleDays": {
        "description": "Equity Trigger Sample Period",
        "format": "int32",
        "type": "integer"
      },
      "eqtTriggVal": {
        "description": "Equity Trigger Value",
        "format": "float",
        "type": "number"
      },
      "escrow": {
        "description": "Either party requires that physical settlement take place through the use of an independent third party escrow agent.",
        "type": "string"
      },
      "escrowType": {
        "description": "Type of securities invested in the escrow  fund. The full list of values can be found in the MULLER_ESCTYPE decode.",
        "type": "string"
      },
      "estimatedTerms": {
        "description": "A y/n flag indicating if the bond has estimated terms",
        "type": "string"
      },
      "eventAcceleration": {
        "description": "Indicator that shows whether the CDS contract covers obligation acceleration. An obligation comes due before it would otherwise because of a default.",
        "type": "string"
      },
      "eventBankruptcy": {
        "description": "Indicator that shows whether the CDS contract covers bankruptcy events.",
        "type": "string"
      },
      "eventDefault": {
        "description": "Indicator that shows whether the CDS contract covers default events (an obligation becomes capable of being declared due before it would otherwise have been because of default).",
        "type": "string"
      },
      "eventDesc": {
        "description": "Indicates the event type that may affect the terms and conditions of a convertible security (e.g.: change in conversion asset, change in conversion asset price currency, price, ratio, fx rate, etc.). The various event types are maintained in CONVERT_EVENT",
        "type": "string"
      },
      "eventDt": {
        "description": "Event Date",
        "format": "date-time",
        "type": "string"
      },
      "eventFailurePay": {
        "description": "Indicator that shows whether the CDS contract covers failure to pay events (reference entity fails to make payments when they become due after expiration of any application grace period).",
        "type": "string"
      },
      "eventLevel": {
        "description": "Event Level",
        "format": "float",
        "type": "number"
      },
      "eventLevelUnit": {
        "description": "The units in which the ratchet event level is defined",
        "type": "string"
      },
      "eventNotice": {
        "description": "Whether there must be notification of a credit event.",
        "type": "string"
      },
      "eventRepudiation": {
        "description": "Indicator that shows whether the CDS contract covers repudiation events i.e. disputes over the validity of the debt and refusing to honour its terms.",
        "type": "string"
      },
      "eventRestruct": {
        "description": "Indicator that shows whether the CDS contract covers restructuring i.e. change in the terms of the debt which casus it to be less favourable to bond holders.",
        "type": "string"
      },
      "eventVal": {
        "description": "Event Value",
        "format": "float",
        "type": "number"
      },
      "eventValUnit": {
        "description": "The units in which the ratchet value is defined",
        "type": "string"
      },
      "exchange": {
        "description": "Exchange on which a security is traded. Options are usually CBOE. For issuers, this is the exchange on which the issuer's equity security trades. Exchange code(s) for sectypes that trade on >1 exchange. e.g. BND/CORP 019087AU9 trades on London, Luxembourg, and NY exchanges as shown by three <EXCHANGE> records: LSE, LUX, NYS. From Identifiers panel on SM GUI.See REUT_EXCHANGE decode.",
        "type": "string"
      },
      "exchangeMic": {
        "description": "Standard market identification code (MIC). For example, XNYS for New York Stock Exchange, XSES for Singapore Exchange, etc.  See decode EXCHANGE_MIC for valid values.",
        "type": "string"
      },
      "excludeAi": {
        "description": "Indicator which shows if accrued interest should be excluded.",
        "type": "string"
      },
      "exerciseTime": {
        "description": "For VSWAPs, this indicates whether the SWAP was executed on market close ?C? or market open ?O?. The complete list of valid values can be found in the VSWAP_EXER_TIME decode",
        "type": "string"
      },
      "exerciseType": {
        "description": "Exercise option type. Values include: 'A' American, 'B' Bermudan, 'E' European 'S' Asian",
        "type": "string"
      },
      "expDt": {
        "description": "Expiration date of the option.",
        "format": "date",
        "type": "string"
      },
      "expectedMaturity": {
        "description": "For options, delivery date. For futures, last delivery. If structured product has final principal pmt before legal final maturity, then EXPECTED_MATURITY=final pmt, MATURITY=legal final mty, and Aladdin schedules final principal on EXPECTED_MATURITY",
        "format": "date",
        "type": "string"
      },
      "expiryTime": {
        "description": "The time and location of the option expiry cut. E.g. N means 10am New York Time, L means 3pm London Time, and T means 3pm Tokyo Time.  Full list is in the OPTION_EXP_TIME decode.",
        "type": "string"
      },
      "extraRedemFlag": {
        "description": "The extraordinary redemption flag, available for municipal securities, is set to Y when the issuer may redeem bonds upon certain events, such as a natural destruction of the facility or an act of government such as eminent domain.  The field is blank where the data is not available or applicable.   It is available in the Schedules > Put Call tab in SecurityMaster.",
        "type": "string"
      },
      "factor": {
        "description": "Factor to calculate the remaining unpaid amount for mortgage pools, ABS, or other amortizing securities, or the factor for TIPS securities. For securities that have no such factor, Aladdin® by convention may assign a factor of 1",
        "format": "double",
        "type": "number"
      },
      "factorDate": {
        "description": "As-of date of the factor. (YYYY-MM-DD)",
        "format": "date",
        "type": "string"
      },
      "factorSource": {
        "description": "Source of the factor. Valid values include E for EJV, D for DTC, M for Manual, etc. Full list of valid values is in the REMIT_SOURCE decode; however, some factors may have no SOURCE, and others may have a SOURCE that is not described in the decode.",
        "type": "string"
      },
      "featureCode": {
        "description": "Indicates floater formula and special option calls.   Full list is in the SMD_FLOATER_STR decode.",
        "type": "string"
      },
      "feeBasis": {
        "description": "Management fee day count basis. The valid list of values can be found in the DAY_COUNTS decode.",
        "type": "string"
      },
      "feeUnderwriting": {
        "description": "Underwriting fee earned by dealer in currency denominations",
        "format": "double",
        "type": "number"
      },
      "feesStartDate": {
        "description": "Management fees accrual start date.",
        "format": "date-time",
        "type": "string"
      },
      "fieldPurpose": {
        "description": "This corresponds to the 'Purpose' field in the client-defined fields tab",
        "type": "string"
      },
      "fieldSource": {
        "description": "The source of this custom field",
        "type": "string",
        "x-nicknames": "source"
      },
      "fieldValue": {
        "description": "The value of the custom field",
        "type": "string",
        "x-nicknames": "value"
      },
      "finalInterpolationEnd": {
        "description": "The index for interpolation of final ending term. The list of valid values can be found in the B_INDEX decode",
        "type": "string"
      },
      "finalInterpolationStart": {
        "description": "The index for interpolation of final starting term. The list of valid values can be found in the B_INDEX decode",
        "type": "string"
      },
      "firmCommitment": {
        "description": "Indicates whether the deal is a firm commitment underwriting. Valid values are Y (Yes) or N (No)",
        "type": "string"
      },
      "firstCpnCalcDate": {
        "description": "Date that first coupon is calculated/auctioned.",
        "format": "date",
        "type": "string"
      },
      "firstDecrDt": {
        "description": "The date of the first decrement",
        "format": "date-time",
        "type": "string"
      },
      "firstPayDt": {
        "description": "First coupon/interest payment date. For securities with coupon type MAT, FIRST_PAY_DT is set to the maturity date.",
        "format": "date",
        "type": "string"
      },
      "firstPrinDt": {
        "description": "First principal payment date.",
        "format": "date",
        "type": "string"
      },
      "firstReset": {
        "description": "For hybrid ARMs, this is the date that they switch from fixed to float.",
        "format": "date",
        "type": "string"
      },
      "firstResetCapPct": {
        "description": "Percent for the first reset cap for ARMS.  This is different from periodic reset or lifetime rate.",
        "format": "float",
        "type": "number"
      },
      "firstResetDate": {
        "description": "The date on which the coupon will change values for the first time.",
        "format": "date",
        "type": "string"
      },
      "firstResetFlavour": {
        "description": "Flag indicating whether first coupon reset only subject to its life cap/floor ('L'). Else both life and periodic cap apply.",
        "type": "string"
      },
      "firstSettleDt": {
        "description": "Date that the security may first settle (ever).",
        "format": "date",
        "type": "string"
      },
      "fiscalYear": {
        "description": "The numeric value for the month in which the fiscal year for this security ends. 1=January, 2=February, 12=Decemeber, etc.",
        "format": "int32",
        "type": "integer"
      },
      "fixedPrincipalPayment": {
        "description": "The fixed payment amount",
        "format": "float",
        "type": "number"
      },
      "flag144a": {
        "description": "Is the security public (N), private (P), 144a (Y), or Reg-S (S).  See REGISTRATION decode for full list of values.  Definition of Reg-S: Bonds sold under Regulation S. may not be offered, sold or delivered within the United States or to, or for the account or benefit of, U.S. persons, except pursuant to an exemption form, or in a transaction not subject to, the registration requirements of the Securities Act., Definition of 144a: 144a is an SEC rule issued in 1990 that modified a two-year holding period requirement on privately placed securities by permitting large institutions to trade these positions among themselves.",
        "type": "string"
      },
      "flagCcn": {
        "description": "Y or N flag indicating if a security is a Capital Contingent Convertible Note",
        "type": "string"
      },
      "flagControl": {
        "description": "Y/N flag to designate if a security is corporate sponsor controlled.",
        "type": "string"
      },
      "flagConvert": {
        "description": "Convertible flag",
        "type": "string"
      },
      "flagDeriv": {
        "description": "Y/N, is this a derived municipal security: Dealers put fixed-cpn munis into a trust and split cash flows from them into two synthetic securities. Usually one resets cpn daily, weekly or other so it always trades at par, like real MVRDNs",
        "type": "string"
      },
      "flagEndAdj": {
        "description": "Same as END_ADJ_FLAG. Most security types use END_ADJ_FLAG. SYNTH types use FLAG_END_ADJ",
        "type": "string"
      },
      "flagEom": {
        "description": "Whether a bond pays at the end of each month ('Y') or uses the actual date from the FIRST_PAY_DT field ('N' or null). For example, a bond whose FIRST_PAY_DT is 2/28 and pays semi-annually would pay on 2/28 and 6/30 (the end of the month) if FLAG_EOM=Y but would pay on 2/28 and 6/28 (the 28th, not necessarily the end of month) if FLAG_EOM is N or null.",
        "type": "string"
      },
      "flagErisa": {
        "description": "Indicates whether a security is ERISA eligible. ERISA is a 1974 law governing the operation of most private pension and benefit plans. ERISA increases protection of the interests of plan participants",
        "type": "string"
      },
      "flagIndexRound": {
        "description": "(R)ound or (T)runcate index value at reset.",
        "type": "string"
      },
      "flagPerforming": {
        "description": "Flag to indicate whether a bond is in default or not. N means not performing (it is in default). Null or Y mean it is performing.  To stop a defaulting security from accruing interest a floater panel is added with the following attributes.  INDEX0=NO_INDEX), INITIAL_COUPON=0), RESET_FREQ_DTL=S), INDX2=FIXED.  The default date is the start date of this floater panel (START_DT).",
        "type": "string"
      },
      "flagRegRights": {
        "description": "Regulation Rights: This applies only to 144a securities. This means the issuer has the 'right' to formally register the security with the SEC and by doing so get an entirely new CUSIP for the security.  Doing this would imply that the holder would have to be willing to potentially sell out of the original 144a CUSIP and then buy into the 'registered' security.  Y=with Reg Rights; N or null = without Reg Rights.",
        "type": "string"
      },
      "flagRound": {
        "description": "Flag to designate if the security payment factors are rounded or truncated. Values include: 'R', 'T'.",
        "type": "string"
      },
      "flagSmmea": {
        "description": "Indicates if the security is SMMEA eligible",
        "type": "string"
      },
      "floaterId": {
        "description": "Security ID of the associated floater. The BND/RES calculates its coupons according to the floater information of the referenced floater security. If there are many BND/RES for one floater, then enter the same Floater ID for each of the several BND/RES.",
        "type": "string"
      },
      "floaterOrigFace": {
        "description": "Original face of the floater associated with this BND/RES.",
        "format": "float",
        "type": "number"
      },
      "fnlSetmtMeth": {
        "description": "Final settlement method of the swaption, either CASH or TRAD. CASH settles cash for the NPV of the swaption at exercise. TRAD enters into a swap at exercise. TRAD is short for Trade and is shown on front end of SecurityMaster as PHYSICAL DELIVERY.",
        "type": "string"
      },
      "fractionFlag": {
        "description": "Deprecated.  Use CONVERT_TERMS and CONVERT_SCHED vectors instead. How are fractions of shares handled at conversion. Corresponds to 'Fraction Treatment' on Security Master GUI, Conversion Schedule. Are fractions ignored, paid in cash, etc.",
        "type": "string"
      },
      "fractionTreatment": {
        "description": "Designates how fractions are to be treated in the event of a conversion (e.g.: disregard fractions, settled in cash, etc.). The various fraction treatment types are maintained in CONVERT_FRAC",
        "type": "string"
      },
      "fractionalPmtAmt": {
        "description": "Upon conversion some bonds will not convert into a whole number of shares. In these cases, an auxiliary cash payment is made to the bondholder in lieu of the fractional shares.",
        "format": "float",
        "type": "number"
      },
      "fractionalPmtCurrency": {
        "description": "Currency in which the fractional payment amount is denominated. Currency values are maintained in B_CURRENCY",
        "type": "string"
      },
      "fundedAmount": {
        "description": "For Bank Loans this is the total funded amount.  Also sometimes referred to as the global facility amount.",
        "format": "float",
        "type": "number"
      },
      "funding": {
        "description": "High level funding source. Valid values include: 'GO' General Obligation and 'REV' Revenue Bonds.",
        "type": "string"
      },
      "futureClass": {
        "description": "Indicates the classification of the  FUTURE security. Some  examples include CMDTY (Commodity), CRED (Credit), INTR (Interest Rate), WEATH (Weather). The complete list of valid values can be found in the FUTURE_CLASS decode.",
        "type": "string"
      },
      "futureCode": {
        "description": "Type of future. Sometimes standard futures code, e.g. TY for US 10-Year future. Sometimes an Aladdin code, e.g. ME for SnP Mini Future. This is a short version of what appears in Class picklist for futures in Security Master GUI. See FUTURE_TYPES decode",
        "type": "string"
      },
      "fxRate": {
        "description": "The rate of exchange between the underlying asset and the bond",
        "format": "float",
        "type": "number"
      },
      "fxRateDirection": {
        "description": "Indicates if the fx_rate is that of the underlying asset to the bond currency or of the bond to the underlying asset currency. This specification is maintained in CONVERT_EX_RATE",
        "type": "string"
      },
      "gainShare": {
        "description": "Capital gains may be paid upon termination of the trust. The gains are shared by the floater and the BND/RES. Gain Share indicates the percent of the capital gains that the floater (not the BND/RES!) will be paid. This does not drive payments or analytics; it is informational only.",
        "format": "float",
        "type": "number"
      },
      "graceExtension": {
        "description": "Extension of payment. Grace Period.",
        "format": "int32",
        "type": "integer"
      },
      "grossMargin": {
        "description": "Gross margin in percentage points, e.g. 22bps is entered as 0.22.",
        "format": "double",
        "type": "number"
      },
      "hurdleConv": {
        "description": "Specifies the conventioned by which the hurdle is expressed (e.g.: parity as percent of face, premium, percentage, rating, nominal value, etc.). The hurdle conventions are maintained in CONVERT_HURDLE",
        "type": "string"
      },
      "hurdleMaxNoticeVal": {
        "description": "The Maximum number of days notice the issuer is required to give in the event that the hurdle is exceeded, and the issuer elects to call the bond.",
        "format": "int32",
        "type": "integer"
      },
      "hurdlePrice": {
        "description": "The underlying asset price value at or above which the issuer has a call option right",
        "format": "float",
        "type": "number"
      },
      "hurdlePriceConv": {
        "description": "Price convention (e.g.: ask, bid, close, high, low, etc.) used for the call hurdle. The various types are maintained in CONVERT_PRICE",
        "type": "string"
      },
      "identifier": {
        "description": "Value of the identifier.",
        "type": "string"
      },
      "incomePayment": {
        "description": "Defines if the underlying income should be ignored or pass-through and when relatively to the performance schedule. The list of valid values can be found in the PAYMENT_TYPE decode.",
        "type": "string"
      },
      "incrShareFactor": {
        "description": "Factor applied to the current conversion ratio in order to determine the expected conversion ration applicable upon conversion when the trigger is met.",
        "format": "float",
        "type": "number"
      },
      "indAmt": {
        "description": "Independent Amount",
        "format": "float",
        "type": "number"
      },
      "index0": {
        "description": "A description of the index on which the floater is based. This is for reporting purposes. Most securities are priced off points in the LIBOR curve. For auction securities, this should be set to AUCTION. Index for coupon resets US3MLIB appears on SM GUI as USD-LIBOR-BBA-3MO as per B_INDEX decode. For FpML equivalents; ask for econ_reset_rates_info: extern_index_name & tenor. If INDEX0 is null & INDX2 field is not null, INDX2 is provided in INDEX0 tag.",
        "type": "string"
      },
      "indexName": {
        "description": "This can be a foreign key to secmaster or a descriptive value. Descriptive values are explained in decodes EJV_PX_BMK_CRV and EJV_PX_METHOD_C. Other values may appear.  EJV_PX_METHOD_C Explains the pricing methodology such as Yield Spread or OAS Spread. EJV_PX_BMK_CRV lists the curves",
        "type": "string"
      },
      "indexPrecision": {
        "description": "Precision of index used for coupon calculation.\nThe number of decimal points that will be expressed in the index rate.",
        "format": "int32",
        "type": "integer"
      },
      "indexValue": {
        "description": "The value of the index used for calculation. For example, the value of the index used for calculation of the performance return on TRS, and to compute the notional to apply the financing rate for the upcoming period.  For the performance leg of a TRS, this value represents the level/price of the underlying asset. On the financing leg, this is the floating rate index level excluding spread.",
        "format": "float",
        "type": "number"
      },
      "indexationPrecision": {
        "description": "Rounding precision of the cash flows indexation factor",
        "format": "int32",
        "type": "integer"
      },
      "indx2": {
        "description": "General index name for coupons resets. This is used only for reporting. E.g. '3M Libor.' Full list of valid values is in the INDEX decode, and the values displayed in this tag have already been decoded to match the value of the MEANING tag in the decode file.",
        "type": "string"
      },
      "indxLookback": {
        "description": "Lookback period defining the 'reference' CPI for a given cash flow",
        "format": "int32",
        "type": "integer"
      },
      "initInterpolationEnd": {
        "description": "The index for interpolation of initial ending term. The list of valid values can be found in the B_INDEX decode",
        "type": "string"
      },
      "initInterpolationStart": {
        "description": "The index for interpolation of initial starting term. The list of valid values can be found in the B_INDEX decode",
        "type": "string"
      },
      "initResetMthd": {
        "description": "Specifies if an initial reset is subjected to the auto-reset process in BondCalc. If set to: Auto-Reset - the initial coupon is not required and will be found automatically. User Defined - the initial coupon is required. The valid list of values can be found in the INIT_LVL_METHOD decode.",
        "type": "string"
      },
      "initResetPeriod": {
        "description": "The initial reset period on an adjustable rate security. This is the amount of time that the rate on the security is scheduled to remain unchanged. The rate will be reset at the end of this period. This value is measured in months.",
        "format": "int32",
        "type": "integer"
      },
      "initialCoupon": {
        "description": "The coupon rate set at the beginning of a floating rate security's life. For step-up/down securities (identified through a FLOATER_INDEX0 value of 'FIXED') the coupon rate for the applicable step period will be contained within this data field.",
        "format": "double",
        "type": "number"
      },
      "instFeatCode": {
        "description": "Instrument Feature Code",
        "type": "string"
      },
      "instmt": {
        "description": "Free form notes and comments associated with the security.",
        "type": "string"
      },
      "intFloor": {
        "description": "Boolean indicating if interest is protected from deflation",
        "type": "string"
      },
      "interest": {
        "description": "Total accrued interest on the transaction in the settle_ccy. Incoming money is negative, and outgoing money is positive. Note: There is no net money field; instead, net money = principal + interest + commission + fees",
        "format": "double",
        "type": "number"
      },
      "interestTreatment": {
        "description": "When a conversion occurs between interest payment dates, this stipulates how the remaining accrued interest should be paid (e.g.: disregard it, issuer pays full coupon, issuer pays accrued interest only, no interest paid, etc.). The various interest treatment types are maintained in CONVERT_INT",
        "type": "string"
      },
      "interpolationType": {
        "description": "Reference CPI interpolation methodology: F=Floor, L=Linear.  For full list of valid values, see the CPI_INTERP_TYPE decode.",
        "type": "string"
      },
      "intexDealName": {
        "description": "Deal Name in Intex",
        "type": "string"
      },
      "intexTrancheName": {
        "description": "Tranche name in intex",
        "type": "string"
      },
      "issueDt": {
        "description": "The date the security was issued.",
        "format": "date",
        "type": "string"
      },
      "issuePrice": {
        "description": "For securities, the price at issue.",
        "format": "double",
        "type": "number"
      },
      "issueSpeed": {
        "description": "Prepayment speed used to price the security at issuance",
        "format": "float",
        "type": "number"
      },
      "issueSpread": {
        "description": "Spread over benchmark at which deal was priced",
        "format": "float",
        "type": "number"
      },
      "issueStatusCd": {
        "description": "Code indicating the status of the terms of the issue during the initial phase. Convertibles are announced to the market before the terms are fully determined (commonly the coupon and conversion premium are often not yet fixed)",
        "type": "string"
      },
      "issueYield": {
        "description": "The yield of the security at the time of issue",
        "format": "double",
        "type": "number"
      },
      "issuerId": {
        "description": "The (usually) 6-digit code that is assigned to a particular issuer of securities.",
        "type": "string"
      },
      "issuersBoundaryDt": {
        "description": "Issuers option boundry date",
        "format": "date-time",
        "type": "string"
      },
      "label": {
        "description": "A name for the UDF or sector that identifies the type of data, e.g. CLIENT_MUNI_SECTOR. The particular value of the LABEL for this CUSIP (e.g. 'Airport Revenue')  is provided in the VALUE field.  E.g.:<UDF_set SIZE='1'>  <UDF_record>",
        "type": "string"
      },
      "lastRegularPmt": {
        "description": "This field is used only for securities who have an odd final coupon period. It denotes the final date on which a regular interest payment will be made. The coupon period after this date will usually be a short or long period.",
        "format": "date",
        "type": "string"
      },
      "leadMgr": {
        "description": "The name of the underwriter of the security.  Full list is in the LEAD_MGR decode. For SWAP securities, this is the exchange on which the derivative was centrally cleared.",
        "type": "string"
      },
      "lehIndustry": {
        "description": "The industry sector code to which the bond issuer belongs, which is recognized by Lehman Brothers. Entries to this field contain both the broad industry grouping, as well as a more specific sub-sector definition. An example would be Financial - Brokerage. The codes would be for eg. BANK, LIFE, RETL, etc. Full list of valid values is in the B_LEH_INDUS_ALL decode.",
        "type": "string"
      },
      "lien": {
        "description": "Designates seniority of claims on collateral of secured loans. i.e.: the claims on collateral of second-lien loans are behind those of first-lien loans. Lien type also has some inference to the quality/riskiness of loans. The valid list of values can be found in the LOAN_LN_TYPES decode.",
        "type": "string"
      },
      "lienType": {
        "description": "An indicator of the priority of the lien placed on the related mortgage property.",
        "type": "string"
      },
      "lifeCap": {
        "description": "Lifetime cap. Maximum possible value the coupon could reset to. (percentage).",
        "format": "double",
        "type": "number"
      },
      "lifeFloor": {
        "description": "Lifetime floor. Minimum possible value the coupon could reset to. (percentage).",
        "format": "double",
        "type": "number"
      },
      "liquidity": {
        "description": "Whether a security is considered \"LIQUID\", i.e. easily converted into cash. A security is considered liquid if it has a specified rating of A or better. L is Liquid, N is Not liquid.",
        "type": "string"
      },
      "liquidityFee": {
        "description": "Fee paid to the remarketing agent, expressed as a percent. For example, 10 basis points is recorded as 0.10. This is applied to the Floater Orig Face. Aladdin can then subtract the fee from each coupon payment (under development).",
        "format": "float",
        "type": "number"
      },
      "loanPurpose": {
        "description": "Attribute used to categorize the loan?s purpose. The valid list of values can be found in the LOAN_PURPOSE decode.",
        "type": "string"
      },
      "lockout": {
        "description": "This is the date on which the initial coupon rate ceases to be effective.  This is often equal to the first reset date.",
        "format": "date",
        "type": "string"
      },
      "lockoutMonths": {
        "description": "Lockout Months.  This is for pools with penalty periods.  Some borrowers have to pay a penalty during the first 3 or 5 years if they refinance.  They get a slightly lower rate at origination for agreeing to this term.  As of 10/7/2005, this field is not currently populated.",
        "format": "int32",
        "type": "integer"
      },
      "lookback": {
        "description": "This is the number of days a floating rate bond looks back to get the rate. The number of days before the reset date that the index value is determined.",
        "format": "int32",
        "type": "integer"
      },
      "lookbackAdjustMeth": {
        "description": "How the lookback should adjust for a holiday. This is on SM GUI floater panel as Lookback Adjust. e.g. No Adjust, Following, Mod Following, and Previous. GUI values are in ADJUST_METH decode; XML values are in SMD_ADJUST_ME decode. In most cases, Lookback Adjust should be \"Previous,\" Lookback Days should be 2 (for Libor), and \"Lookback Day Calendar\" should be \"Business\". Those fields work together to tell \"Bulk Reset (internal)\" securities where to look for the effective rates of the underlying index.\nBackground: Libor has a standard 2 business day look-back for resets. So, on any given reset date, the Libor rate which will be effective is not the rate from that same day, but from two business days prior. So if a 1 Month Libor floater had a reset day of 2/4, then the Libor rate which would become effective would be from two days prior.",
        "type": "string"
      },
      "lookbackCal": {
        "description": "Calendar used to determine holidays for coupon lookback computations. \"&\" indicates \"and.\" \"|\" indicates \"or.\" LIBOR floaters usually use LN. Euroibor index rates should use look-back calendar TARGET.",
        "type": "string"
      },
      "lookbackConv": {
        "description": "Lookback convention. Designates if the lookback days are business or calendar. Values include 'B' [Business], 'C' [Calendar].",
        "type": "string"
      },
      "lookbackType": {
        "description": "Indicates whether the accrual period day weight is adjusted for the observation period or the interest period.  Valid values are INT and OBS and can be found in the LOOKBACK_TYPE decode.",
        "type": "string"
      },
      "ltv": {
        "description": "Loan-to-value. This is the ratio of the unpaid principal balance of the loan to the value of the mortgaged property securing the loan",
        "format": "float",
        "type": "number"
      },
      "makeWholeCall": {
        "description": "Flag indicating whether this security was made with a make-whole call provision. Y indicates yes, N or null indicate no. A make-whole call provision on a bond allows the issuer to redeem the bond before maturity at a redemption price derived from a formula based on the net present value of future coupons that will not be pain because of the call.",
        "type": "string"
      },
      "makeWholeSpread": {
        "description": "Indicates the spread at which the redemption price will be calculated for securities made with a make-whole call provision.",
        "format": "float",
        "type": "number"
      },
      "mandatoryConvFlag": {
        "description": "The bondholder is required to convert the bond into a predetermined amount of underlying stock, at maturity.",
        "type": "string"
      },
      "margin": {
        "description": "Margin. Amount (in percent) added to the effective index to determine coupon reset values. Could be either positive or negative. In Aladdin, the formula used to determine coupon resets is: [MULT*INDX0] + NET_MGN (Subject to any applicable caps or floors).",
        "format": "double",
        "type": "number"
      },
      "market": {
        "description": "Market refers to the country of the security’s primary market of trading. Often times this value is the same as the country of issue, however this is not always the case. For equity derivatives, the market field should match that of the underlying.",
        "type": "string"
      },
      "marketIssue": {
        "description": "Indicates the method used to issue this security. For SWAP securities, a value of CCP indicates that the derivative was centrally cleared.",
        "type": "string"
      },
      "marketMic": {
        "description": "Market Identifier Code.  The ISO 10383 code for Market or Exchange identification.",
        "type": "string"
      },
      "maturity": {
        "description": "The end date of any security. For non-notional securities, this is the date on which the original principal amount becomes due and payable. Otherwise known as the \"legal final maturity.\" For perpetual securities, enter 12/31/2049 as the maturity (Aladdin convention). This field can also represent the end date of any credit enhancements.",
        "format": "date",
        "type": "string"
      },
      "maxCallNotice": {
        "description": "The maximum numbers of days prior to the call date that the issuer can notify the bondholder that the bond will be called.",
        "format": "int32",
        "type": "integer"
      },
      "maxNoticeVal": {
        "description": "Maximum Notice Period",
        "format": "int32",
        "type": "integer"
      },
      "maxPutNotice": {
        "description": "The maximum numbers of days prior to the put date that the issuer can notify the bondholder that the bond will be put.",
        "format": "int32",
        "type": "integer"
      },
      "maxRatchetVal": {
        "description": "The maximum permissible ratchet value",
        "format": "float",
        "type": "number"
      },
      "maxRatchetValUnit": {
        "description": "The units in which the maximum ratchet value is defines",
        "type": "string"
      },
      "mgmtFees": {
        "description": "TRS management fee to be paid/received along with Performance payments, this is common for commodity index swaps.",
        "format": "float",
        "type": "number"
      },
      "minCallNotice": {
        "description": "The minimum numbers of days prior to the call date that the issuer can notify the bondholder that the bond will be called.",
        "format": "int32",
        "type": "integer"
      },
      "minChange": {
        "description": "The minimum change to the quantity described by dprot_type_cd",
        "format": "float",
        "type": "number"
      },
      "minLotSize": {
        "description": "The smallest incremental block that can be traded after the minimum trade size has been met.",
        "format": "double",
        "type": "number"
      },
      "minNoticeVal": {
        "description": "Minimum Notice Period",
        "format": "int32",
        "type": "integer"
      },
      "minPutNotice": {
        "description": "The minimum numbers of days prior to the put date that the issuer can notify the bondholder that the bond will be put.",
        "format": "int32",
        "type": "integer"
      },
      "minRatchetVal": {
        "description": "The minimum permissible ratchet value",
        "format": "float",
        "type": "number"
      },
      "minRatchetValUnit": {
        "description": "The units in which the minimum ratchet value is defines",
        "type": "string"
      },
      "minTrdSize": {
        "description": "The smallest block of this security that can be traded.",
        "format": "double",
        "type": "number"
      },
      "mipSecId": {
        "description": "MarkitPartners 9-digit Red Code NOTE : this is only displayed if the proper agreement is in place with MIP",
        "type": "string"
      },
      "mirror": {
        "description": "Applicable for MBS pools, this value of this field is Y if the pool is a Freddie Mac mirror.",
        "type": "string"
      },
      "mirrorAssocCusip": {
        "description": "Applicable for MBS pools, when the pool is a Freddie Mac mirror, this field is set to the CUSIP of the legacy 45-day pool.  When the pool is a legacy 45-day pool with an associated mirror, this field is set to the CUSIP of the mirror. Otherwise, it will not be populated.",
        "type": "string"
      },
      "miscFee": {
        "description": "Other fees, expressed as a percent. This is applied to the Floater Orig Face. Aladdin can then subtract the fee from each coupon payment.",
        "format": "float",
        "type": "number"
      },
      "mkWholeCalcTypeCd": {
        "description": "The method used to calculate the make whole amount",
        "type": "string"
      },
      "mkWholeCap": {
        "description": "Make whole cap value in cash",
        "format": "float",
        "type": "number"
      },
      "mkWholeDays": {
        "description": "The number of days used to calculate the average equity price",
        "format": "int32",
        "type": "integer"
      },
      "mkWholeDaysCd": {
        "description": "The day type used to calculate the averaging period",
        "type": "string"
      },
      "mkWholeEffDt": {
        "description": "Start date of the make whole calculation period",
        "format": "date-time",
        "type": "string"
      },
      "mkWholeEndDt": {
        "description": "End date of the make whole calculation period",
        "format": "date-time",
        "type": "string"
      },
      "mkWholeFinalCpnDt": {
        "description": "The date of the final coupon to be included in the calculation of the make whole amount - usually maturity",
        "format": "date-time",
        "type": "string"
      },
      "mkWholeFloor": {
        "description": "Make whole floor value in cash",
        "format": "float",
        "type": "number"
      },
      "mkWholeOptionNum": {
        "description": "Identifies where a specific segment of make whole terms in the convert_make_whole view are applicable to the redemption option associated with a convert_hurdle effective period.",
        "format": "int32",
        "type": "integer"
      },
      "mkWholePmtTypeCd": {
        "description": "The make whole payment type",
        "type": "string"
      },
      "mkWholePriceCd": {
        "description": "The equity price type used to calculate the make whole amount",
        "type": "string"
      },
      "mkWholePvRate": {
        "description": "The PV rate",
        "format": "float",
        "type": "number"
      },
      "mkWholePvTypeCd": {
        "description": "The method used to calculate the PV",
        "type": "string"
      },
      "mkWholeRateCd": {
        "description": "The source for the PV market rate",
        "type": "string"
      },
      "mkWholeTypeCd": {
        "description": "Description of the make whole type",
        "type": "string"
      },
      "modifiedBy": {
        "description": "Login ID of the person or program that last modified this record.",
        "type": "string"
      },
      "modifiedTimestampUtc": {
        "description": "Date and time when this record was modified in UTC. (YYYY-MM-DDThh:mm:ss.SSSZ)",
        "format": "date-time",
        "type": "string",
        "x-nicknames": "modify_time"
      },
      "mtgSubtype": {
        "description": "Extra description of security (sec_desc2). For TBAs, this field is used to identify securities with certain characteristics (e.g. LLB - Low Loan Balance, ORIG - Originator specific).",
        "type": "string"
      },
      "mtn": {
        "description": "Yes/No flag to designate if the security is a MTN. Values include: 'Y', 'N'.",
        "type": "string"
      },
      "mult": {
        "description": "Index multiplier within the coupon reset formula. Could be either positive or negative. A negative multiplier designates an inverse floater. In Aladdin, the formula used to determine coupon resets is: [MULT*INDX0] + NET_MGN (Subject to any applicable caps or floors).",
        "format": "double",
        "type": "number"
      },
      "multiOrigFl": {
        "description": "Indicates whether mortgages are from one or more originators.  Sourced from SIAC.",
        "format": "int32",
        "type": "integer"
      },
      "muniType": {
        "description": "Type of municipal. Full list is in the MUNI_TYPES decode.",
        "type": "string"
      },
      "negAmCap": {
        "description": "Cap on negative amortization.",
        "format": "float",
        "type": "number"
      },
      "netCpn": {
        "description": "Net coupon paid to Client or Pass Through holder [Gross Coupon - Servicing Fee] (percentage).",
        "format": "float",
        "type": "number"
      },
      "nextAccrualDate": {
        "description": "End of the accrual period for custom reset/payment schedules.",
        "format": "date-time",
        "type": "string"
      },
      "noticeDate": {
        "description": "TBA notification date. This date represents when counterparties must be notified of the mortgage pools that are intended for delivery to satisfy a TBA agreement. This is generally 2 business days before the settlement date of the TBA. This is also known as 48 hour day.",
        "format": "date",
        "type": "string"
      },
      "noticeDaysCd": {
        "description": "Notice Period Days Code",
        "type": "string"
      },
      "noticeOfPhysical": {
        "description": "Whether there must be notice of intended physical settlement.",
        "type": "string"
      },
      "noticePeriod": {
        "description": "The number of days notice the issuer is required to give in the event the issuer elects to call the bond when the hurdle is exceeded",
        "format": "int32",
        "type": "integer"
      },
      "noticePeriodConv": {
        "description": "The day convention associated with the hurdle notice period. B = Business days, C = Calendar Days. Day conventions are maintained in CALENDAR_TYPE",
        "type": "string"
      },
      "notifyingParty": {
        "description": "Defines which counter-party will give the credit event notice. Valid choices are B for 'Buyer', or S for 'Buyer or Seller'",
        "type": "string"
      },
      "notionalAmt": {
        "description": "For notional securities, the face amount upon which interest payments will be calculated (although no actual principal is exchanged or paid back). In the case of preferred equity, this would be the base 'par' value per share.",
        "format": "double",
        "type": "number"
      },
      "notionalFace": {
        "description": "Notional face amount option is on.",
        "format": "float",
        "type": "number"
      },
      "nth": {
        "description": "Nth To Default",
        "format": "float",
        "type": "number"
      },
      "ntlAmortTiming": {
        "description": "Defines amortization timing between performance and funding legs (At fixing, At Payment). The valid list of values can be found in the AMORT_TIMING decode.",
        "type": "string"
      },
      "ntlFlag": {
        "description": "Yes/No flag to designate if the security is a notional security (does not pay principal - coupon payments are computed off of a notional amount). Values include: 'Y', 'N'.",
        "type": "string"
      },
      "ntlVarFixed": {
        "description": "Fixed vs. variable notional.  Variable notional is the case when the trade?s notional is periodically reset to the market value of a certain amount of underlying. The list of valid values can be found in the NOTIONAL_TYPE decode.",
        "type": "string"
      },
      "oblAddSpecific": {
        "description": "If Yes, include specific CUSIPs in the Notes field.",
        "type": "string"
      },
      "oblCategory": {
        "description": "Obligation category: P=Payment, M=Borrowed Money, R=Reference Obligation(s) only, B=Bond, L=Loan, O=Bond or Loan.",
        "type": "string"
      },
      "oblContingent": {
        "description": "Any obligation (a) the payment or repayment of principal in respect of which is in an amount determined by reference to any formula or index, or which is subject to any contingency, and (b) which bears interest at either a fixed or floating rate that is paid on a periodic basis and computed on a benchmark interest rate plus or minus a spread, if any. Usually excludes convertible bonds.",
        "type": "string"
      },
      "oblDomCurrency": {
        "description": "The currency in which the security is denominated.",
        "type": "string"
      },
      "oblDomIssuance": {
        "description": "Any obligation that was, at the time the relevant obligation was issued (or reissued) or incurred, intended to be offered for sale primarily in the domestic market of the relevant Reference Entity.",
        "type": "string"
      },
      "oblDomLaw": {
        "description": "Any obligation that is governed by the laws of (a) the relevant Reference Entity (if sovereign), or (b) the jurisdiction of organization of the relevant Reference Entity (if not sovereign).",
        "type": "string"
      },
      "oblExcludeSpecific": {
        "description": "If \"Yes\", include specific CUSIPs in the Notes field.",
        "type": "string"
      },
      "oblListed": {
        "description": "Any obligation that is quoted, listed or ordinarily purchased and sold on an exchange.",
        "type": "string"
      },
      "oblParipassu": {
        "description": "Any obligation that ranks at least pari passu with the most senior Reference Obligation in priority of payment.",
        "type": "string"
      },
      "oblSovereign": {
        "description": "Any obligation that is primarily owed to a Sovereign or Supranational Organization, including obligations referred to as Paris Club Debt.",
        "type": "string"
      },
      "oblSpecCurrency": {
        "description": "Any obligation that is payable in the currency or currencies specified in the related confirmation.",
        "type": "string"
      },
      "offeringAmt": {
        "description": "Total offering amount on issuance",
        "format": "double",
        "type": "number"
      },
      "offeringId": {
        "description": "Unique offering identifier",
        "format": "int32",
        "type": "integer"
      },
      "offeringType": {
        "description": "The type of offering, Primary (P) or Secondary (S)",
        "type": "string"
      },
      "oidPrice": {
        "description": "Original Issue Discount Price.",
        "format": "float",
        "type": "number"
      },
      "oidYield": {
        "description": "Original Issue Discount Yield.",
        "format": "float",
        "type": "number"
      },
      "old": {
        "description": "For CUSIP_LOGs, the former CUSIP if the security's CUSIP was changed. Note: Maximum one CUSIP_LOG row will be sent. It will show the previous CUSIP and only the previous CUSIP. For example, if the CUSIP changed from A to B, then a CUSIP_LOG row with OLD = A will be sent. If the security later changes from B to C,  a single CUSIP_LOG with OLD = B will be sent.",
        "type": "string"
      },
      "optionCallPut": {
        "description": "Aladdin's internal embedded option flag. Flag is used to determine the types of embedded options associated with a security.   C is Call. P is Put.  w is Warrant. RTP is the right to pay fixed rate if the swaption is excercised.  RTR is the right to receive fixed rate if the swaption is excercised.  Full list of valid values is in the CALL_OR_PUT decode for swaptions (SYNTH/SWAP), and the PC_TYPES decode for all other options.",
        "type": "string"
      },
      "optionNum": {
        "description": "The same convertible security could have different conversion options (e.g. a mandatory convertible option vs. an investor's option to convert). Each option_num represents a specific set of convertible terms for the associated security",
        "format": "int32",
        "type": "integer"
      },
      "optionType": {
        "description": "Specifies if the conversion right rests with the holder or issuer. For certain mandatorily convertible securities, no conversion option is offered and investors basically receive the applicable shares upon the security's maturity. The various option types are maintained in CONVERT_OPT_TYP decode",
        "type": "string"
      },
      "origBasePrice": {
        "description": "Market price of the underlying bond at the time that it was deposited into the trust. This price is published when the BND/RES is issued.",
        "format": "float",
        "type": "number"
      },
      "origCoupon": {
        "description": "The original coupon of the security.",
        "format": "float",
        "type": "number"
      },
      "origFace": {
        "description": "Original face amount of the referenced security or loan.",
        "format": "double",
        "type": "number"
      },
      "origGrossMargin": {
        "description": "Gross Margin. Amount (in percent) over the specified index at the time the pool is issued that the homeowner pays. This includes both servicing and guarantee fees.",
        "format": "float",
        "type": "number"
      },
      "origIoMonths": {
        "description": "A.k.a. Original WAMTAM (Weighted Average Months To Amortization).  The number of months until amortization as of the security issuance.",
        "format": "float",
        "type": "number"
      },
      "origLifeCap": {
        "description": "Lifetime cap. Maximum possible value the coupon could reset to based upon pool composition at issuance. (percentage).  This field pertains to ARM securities only the data is supplied by the agencies.",
        "format": "float",
        "type": "number"
      },
      "origLifeFloor": {
        "description": "Lifetime floor. Minimum possible value the coupon could reset to based upon pool composition at issuance. (percentage).  This field pertains to ARM securities only the data is supplied by the agencies.",
        "format": "float",
        "type": "number"
      },
      "origNetMargin": {
        "description": "Net Margin. Amount (in percent) over the specified index at the time the pool is issued that is passed through to the bondholder.",
        "format": "float",
        "type": "number"
      },
      "origTerm": {
        "description": "Weighted average original amortization term (in months) of the loan or of the loans within the pool.",
        "format": "int32",
        "type": "integer"
      },
      "origWac": {
        "description": "Original weighted average coupon. This remains constant for life of the security.",
        "format": "float",
        "type": "number"
      },
      "origWam": {
        "description": "Original weighted average maturity in months. This remains constant for life of the security.",
        "format": "int32",
        "type": "integer"
      },
      "originalBalance": {
        "description": "Total original face amount of the pool at issuance.",
        "format": "float",
        "type": "number"
      },
      "otherPrepayPrem": {
        "description": "Prepayment Premium: A calculation method of a mortgage loan other than Yield Maintenance Security Rate or Declining Prepayment Premium Formula.",
        "type": "string"
      },
      "paidDownDate": {
        "description": "The date for which the bond pays down",
        "format": "date",
        "type": "string"
      },
      "parAmt": {
        "description": "This is normally the minimum denomination of the convertible security, used as a unit of reference for the conversion ratio",
        "format": "float",
        "type": "number"
      },
      "payAdjFreq": {
        "description": "Frequency in which the accrual coupon (payment amount) changes.  Versus reset frequency - monthly reset (1 M Libor), but the rate on your mortgage only changes once a year based on the weighted average.  For example, 1 = Annually, 12 = Monthly. Valid values in the PRIN_FREQ decode.",
        "format": "int32",
        "type": "integer"
      },
      "payCap": {
        "description": "Pay cap.  Rate Cap for negative amortization products.",
        "format": "float",
        "type": "number"
      },
      "payCurrency": {
        "description": "For FX NDF/OHA/NDO and FX options, contains the currency in which the option payment will be settled.",
        "type": "string"
      },
      "payDate": {
        "description": "Payment Date for custom reset/payment schedules.",
        "format": "date-time",
        "type": "string"
      },
      "payFxReference": {
        "description": "For FX NDF/OHA/NDO, contains the fixing rate source.",
        "type": "string"
      },
      "payNotional": {
        "description": "The notional amount on which the PAY leg payments are based. Used primarily for Currency Swaps and Zero Coupon Interest Rate Swaps.",
        "format": "float",
        "type": "number"
      },
      "payUpfrontPmt": {
        "description": "Amount that the pay leg will have to pay in order to receive the cashflows from the pay leg.",
        "format": "float",
        "type": "number"
      },
      "pcDayConv": {
        "description": "Designates if call/put notification days are business or calendar. Possible values include 'B' [Business], 'C' [Calendar].",
        "type": "string"
      },
      "pdAols": {
        "description": "Current average original loan size.",
        "format": "float",
        "type": "number"
      },
      "pdCap": {
        "description": "Periodic cap. The maximum amount the coupon could reset upward in any given reset period. (percentage).",
        "format": "double",
        "type": "number"
      },
      "pdCoupon": {
        "description": "Most recent ARM coupon available within the database. (percentage).",
        "format": "float",
        "type": "number"
      },
      "pdCouponDt": {
        "description": "The corresponding ARM coupon date for the PD_COUPON.",
        "format": "date",
        "type": "string"
      },
      "pdFactor": {
        "description": "Most recent available factor. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "float",
        "type": "number"
      },
      "pdFactorDt": {
        "description": "The corresponding factor date for the PD_FACTOR. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "date",
        "type": "string"
      },
      "pdFloor": {
        "description": "Periodic floor. The maximum amount the coupon could reset downward in any given reset period. Percentage. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "double",
        "type": "number"
      },
      "pdGeoPct": {
        "description": "The percentage of current unpaid principle balance for the above state referred to in PD_GEO_STATE. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "float",
        "type": "number"
      },
      "pdGeoState": {
        "description": "The state with the highest percent of the current unpaid principle balance. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "type": "string"
      },
      "pdGrossMargin": {
        "description": "Gross Margin. Current amount (in percent) over the specified index that the homeowner pays. This includes both servicing and guarantee fees. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "float",
        "type": "number"
      },
      "pdLifeCap": {
        "description": "Lifetime cap. Maximum possible value the coupon could reset to based upon current pool composition. Percentage. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "float",
        "type": "number"
      },
      "pdLifeFloor": {
        "description": "Lifetime floor. Minimum possible value the coupon could reset to based upon current pool composition. Percentage. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "float",
        "type": "number"
      },
      "pdMosToRoll": {
        "description": "PD_MOS_TO_ROLL is pulled from the SIAC tapes from the 'Average Months to Adjust' field. The definition per SIAC is: \"The weighted average number of months from the 'As of Date' to the next scheduled adjustment dates of the Mortgages in the PC, plus one month to reflect the weighted average time to the related WAC PC coupon adjustment dates.\" This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "int32",
        "type": "integer"
      },
      "pdNetMargin": {
        "description": "Net Margin. Current amount (in percent) over the specified index that is passed through to the bondholder. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "float",
        "type": "number"
      },
      "pdWac": {
        "description": "The weighted average coupon (WAC) of mortgage collateral. For residential mortgages, this denotes the coupon that the homeowner pays. This is the rate that prepayment models use when projecting prepayments. It is weighted by current principal balance of all loans in the collateral. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "float",
        "type": "number"
      },
      "pdWala": {
        "description": "Weighted Average Loan Age (WALA). Current number of months since the borrowers loan origination. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "int32",
        "type": "integer"
      },
      "pdWalaDt": {
        "description": "The corresponding date for the pool and ARM specific information including: PC_WAC, PD_WAM, PD_WALA, PD_LIFE_RATE_CAP, PD_LIFE_RATE_FLOOR, PD_MOS_TO_ROLL, PD_GROSS_MARGIN, PD_NET_MARGIN. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "date",
        "type": "string"
      },
      "pdWam": {
        "description": "Weighted Average Maturity (WAM). Current number of months remaining on the underlying mortgages. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "int32",
        "type": "integer"
      },
      "pdWaolt": {
        "description": "Weighted Average Original Loan Term (WAOLT). Current weighted average number of months at the borrowers loan origination. This field is available only for mortgage pools, not for ABS, CMO, CMBS etc.",
        "format": "int32",
        "type": "integer"
      },
      "percentExposure": {
        "description": "The percentage of exposure for this provider",
        "format": "float",
        "type": "number"
      },
      "percentStrikePrice": {
        "description": "The strike price for an over-the-counter equity option quoted in percentage terms relative to the current stock price.",
        "format": "float",
        "type": "number"
      },
      "period": {
        "description": "The maximum amount of time (expressed in days) after crossing a hurdle before the issuer must declare redemption",
        "format": "int32",
        "type": "integer"
      },
      "periodConv": {
        "description": "The day convention associated with the hurdle period. B = Business days, C = Calendar Days. Day conventions are maintained in CALENDAR_TYPE",
        "type": "string"
      },
      "pmtAdjMeth": {
        "description": "How pmt adjusts if scheduled pmt is on a weekend/holiday. N=No adjust, P=Previous biz day, F=the Following biz day, M=Modified following (next biz day unless in next month). F and M differ when the following business day falls in the next month. With Following, the pmt would fall in the next month.  With M, the pmt would modify to avoid next month and adjust to previous biz day. E.g., if a security pays on Saturday June 30, with F, pmt=Mon July 2.  If M, pmt=Fri June 29. Accrual adjustment is per END_ADJ_FLAG; e.g., scheduled pmt date Saturday, PMT_ADJ_METH=F, and END_ADJ_FLAG=N; pmt date=Monday, but the bond begins accruing the next payment on Saturday bc END_ADJ_FLAG=N means do not adjust accrual end date. Ex 2: Scheduled pmt date Saturday, PMT_ADJ_METH=F, END_ADJ_FLAG=Y; pmt Monday (the next biz day), and bond begins accruing next pmt Monday bc END_ADJ_FLAG Y means accrual end adjusts too. GUI values in ADJUST_METH decode; these translate in XML by SMD_ADJUST_METH decode.",
        "type": "string"
      },
      "pmtCal": {
        "description": "Calendar used to determine holidays for payments. For all PASSTHROUGHs and agency CMOs, this should be NY_Bank. Note: & means 'and' and | means 'or'.  Valid values in RESET_CALENDAR decode",
        "type": "string"
      },
      "pmtCalcCd": {
        "description": "Payment Calculation Type",
        "type": "string"
      },
      "pmtComponentCd": {
        "description": "Payment Components Type",
        "type": "string"
      },
      "pmtDelay1": {
        "description": "Specifies the number of days following the Nominal payment date. The delay can be set in business or calendar days.",
        "format": "int32",
        "type": "integer"
      },
      "pmtDelay1Conv": {
        "description": "Defines business or calendar convention of PMT_DELAY1.  The valid list of values can be found in the  LOOKBACK_CONV decode.",
        "type": "string"
      },
      "pmtDelay2": {
        "description": "Specifies the number of days following the date after 1st payment delay is applied. The delay can be set in business or calendar delay.",
        "format": "int32",
        "type": "integer"
      },
      "pmtDelay2Conv": {
        "description": "Defines business or calendar convention of the PMT_DELAY2.  The valid list of values can be found in the  LOOKBACK_CONV decode.",
        "type": "string"
      },
      "pmtFreqType": {
        "description": "COUP_FREQ and PMT_FREQ_TYPE are used in combination to indicate the coupon frequency.  See the definition of COUP_FREQ. Also note: Pmt Freq Type works in conjunction with Coupon Freq to define the coupon frequency. If Coupon Freq is selected as \"Special,\" then Pmt Freq Type and a second Coupon Freq appear in Security Master as follows:\n1.\tPmt Freq Type field lists special payment frequencies, e.g. every n calendar days, nth Wednesday of the month, etc. see \"Valid Values\" for complete list.\n2.\tCoupon Freq (a second Coupon Freq field) captures the \"n\" of the Pmt Freq Type.\nFor example, if Pmt Freq Type if the coupon pays every 28 days, then Pmt Freq Type is \"Every n calendar days,\" and Coupon Freq (the second one) is 28. If the coupon pays every second Monday of the month, then Pmt Freq Type is \"nth Monday of the month,\" and Coupon Freq (the second one) is 2.\nIf the security pays coupons irregularly, then Pmt Freq Type of \"Irreg no merge\" is used.  And in that case, a separate floater panel is needed for each payment, and the second Coupon Freq should be left blank.\nA Pmt Freq Type of \"Irreg Merge\" is available but is rarely used.",
        "type": "string"
      },
      "pmtLocation": {
        "description": "The company through which payment will be made for the purchase/sale of securities. Valid values in SETTLE_LOC decode.",
        "type": "string"
      },
      "pmtThreshold": {
        "description": "Threshold for event. Payment requirement",
        "format": "float",
        "type": "number"
      },
      "poisonPutAmount": {
        "description": "The poison put amount (% or cash as per poison_put_type_cd)",
        "format": "float",
        "type": "number"
      },
      "poisonPutEndDt": {
        "description": "The end date of the poison put. If this is NULL, the poison put ends at maturity",
        "format": "date-time",
        "type": "string"
      },
      "poisonPutTypeCode": {
        "description": "The poison put type code",
        "type": "string"
      },
      "poolNum": {
        "description": "Agency pool number.",
        "type": "string"
      },
      "premTrigg": {
        "description": "Convertible Premium Level Trigger",
        "format": "float",
        "type": "number"
      },
      "premTriggConvAfter": {
        "description": "Premium Trigger Grace Period",
        "format": "int32",
        "type": "integer"
      },
      "premTriggConvFor": {
        "description": "Premium Trigger Convertible for Period",
        "format": "int32",
        "type": "integer"
      },
      "premTriggOutofDays": {
        "description": "Premium Trigger Out of Days",
        "format": "int32",
        "type": "integer"
      },
      "premTriggSampleDays": {
        "description": "Premium Trigger Sample Days",
        "format": "int32",
        "type": "integer"
      },
      "premium": {
        "description": "Conversion premium at issue, expressed as a percent",
        "format": "float",
        "type": "number"
      },
      "premiumDate": {
        "description": "The date when the premium is paid.",
        "format": "date",
        "type": "string"
      },
      "premiumPrice": {
        "description": "The premium value in percent terms of the notional for the option.",
        "format": "float",
        "type": "number"
      },
      "premiumType": {
        "description": "Indicates the option premium type: Spot (S), Forward (F). If the value is blank or null then consider it to mean Spot premium. The list of valid values can be found in the PREMIUM_TYPE decode.",
        "type": "string"
      },
      "prepayPenaltyTerm": {
        "description": "The number of months during which the associated prepayment protection feature is payable if a borrower voluntarily prepays a mortgage loan.",
        "format": "float",
        "type": "number"
      },
      "prepayPenaltyType": {
        "description": "Indicates either of the following (i) a mortgage loan requires payment of the specified type of Prepayment Premium (e.g., yield maintenance premium, declining premium, fixed prepay schedule, fee maintenance or other) if a borrower voluntarily prepays theloan or (ii) the loan is eligible to defease.",
        "type": "string"
      },
      "prevDivThreshold": {
        "description": "The previous dividend threshold, expressed as the percentage increase in annualized dividend, required in order to trigger the dividend protection clause",
        "format": "float",
        "type": "number"
      },
      "price": {
        "description": "Market price of the security in the security local currency",
        "format": "double",
        "type": "number"
      },
      "priceAsPct": {
        "description": "Flag indicating whether price is quoted as a percentage of face (bonds) or as a simple price (stocks) .",
        "type": "string"
      },
      "priceFormula": {
        "description": "Formula used to calculate the conversion price",
        "type": "string"
      },
      "priceMultiplier": {
        "description": "This value is used to scale the price in futures Daily Margin or PNL = #contracts * (PRICE_today - PRICE_yesterday) * price_multiplier * tick_value and Extended Market Value = #contracts * PRICE * price_multiplier * lot_factor",
        "format": "float",
        "type": "number"
      },
      "priceRangeLower": {
        "description": "The price and ratio range columns will be populated when the conversion price and ratio are variable. They describe the minimum and maximum thresholds of the range (price and ratio) when the conversion terms are variable. The lower threshold of the pricerange determines the conversion ratio (ratio_range_upper)",
        "format": "float",
        "type": "number"
      },
      "priceRangeUpper": {
        "description": "The price and ratio range columns will be populated when the conversion price and ratio are variable. They describe the minimum and maximum thresholds of the range (price and ratio) when the conversion terms are variable. The upper threshold of the pricerange determines the conversion ratio (ratio_range_lower)",
        "format": "float",
        "type": "number"
      },
      "priceWire": {
        "description": "Specific to muni affiliate deals - designate between group sale or net designate",
        "type": "string"
      },
      "pricing": {
        "description": "Determines how these securities are being priced. i.e. Dollar priced or Spread priced. Corresponds to the Pricing field in SecurityMaster.",
        "type": "string"
      },
      "pricingCusip": {
        "description": "A pricing cusip is an Aladdin convention to allow pricing and risk calculations to be performed on just one pricing cusip instead of on the many similar securities that can share that same pricing cusip. For example, a FNMA 5% 15yr passthrough pricing cusip with a certain seasoning may be used for many pools and TBAs instead of pricing them individually. Pricing CUSIPs are assigned by BRS to most passthroughs and TBA securities. The pricing cusip appears in the Green Package and in the analytic position files. It is also provided in the Positions file and can link it to the Analytic Positions file.",
        "type": "string"
      },
      "prinFloor": {
        "description": "Boolean indicating if principal is protected from deflation",
        "type": "string"
      },
      "prinFreq": {
        "description": "Principal payment frequency. Per Aladdin convention the principal payment frequency must match the coupon payment frequency (COUP_FREQ). Payments for securities with separate principal and coupon payment frequencies are adjusted manually via the Aladdin paycheck application. PRIN_FREQ is used in combination with PMT_FREQ_TYPE and compared to the SMD_PMT_COUP_FR decode to derive the actual payment frequency. e.g. The SMD_PMT_COUP_FR decode value represents PMT_FREQ_TYPE + PRIN_FREQ or D+182 and relates tothis decode: \"D+(n) n Calendar Days\" The combination of PMT_FREQ_TYPE + PRIN_FREQ in this case tells you the security pays once every 182 calendar days.",
        "type": "string"
      },
      "principal": {
        "description": "Principal money on the trade in the settle_ccy. Incoming money is negative, and outgoing is positive. e.g. sell 100 shares at $40/sh is -4000 principal. Note: There is no net money field; instead, net money = principal + interest + commission + fees",
        "format": "double",
        "type": "number"
      },
      "proceedsUsed": {
        "description": "Flag indicating whether proceeds were used. Y indicates yes, N indicates no.",
        "type": "string"
      },
      "progCode": {
        "description": "Official agency program code. This may be used with AGENCY to determine the specific mortgage type. For example, AGENCY FG and PROG_CODE A0 means 30-year guarantor. PROG_CODE is provided for pools and not for TBAs.",
        "type": "string"
      },
      "progCodeSub": {
        "description": "Expands upon the 'type'/PROG_CODE bucket.  Set by the agency.",
        "type": "string"
      },
      "projectCode": {
        "description": "Project being financed by the proceeds of the municipal security.  Examples include '10 Barclay Street', 'Park Plaza Retirement Center', 'Duluth Clinic'.  The extract contains the decoded value using the MUNI_PROJECTS decode table.",
        "type": "string"
      },
      "propertyAddress": {
        "description": "The address of the property",
        "type": "string"
      },
      "propertyName": {
        "description": "The name of the property or properties securing the mortgage loan.",
        "type": "string"
      },
      "propertyType": {
        "description": "The type of multifamily mortgaged property securing a mortgage loan.",
        "type": "string"
      },
      "prospectus": {
        "description": "The physical location of the bond's prospectus. A prospectus is a document the SEC requires for mutual fund shares, limited partnership, and general corporate securities issues. It includes such information as the financial background of the company or its officers and the company's investment potential.  Full list is in the PROSPECTUS_LOC decode.",
        "type": "string"
      },
      "provider": {
        "description": "Issuer ID of the underlying credit provider.",
        "type": "string"
      },
      "psaClass": {
        "description": "TBA settlement dates are classified by product class. Field will display A, B, C or D. These letters are market standard terms. Search for MBS Settlement and Notification Dates at http://www.sifma.org/ for more details.",
        "type": "string"
      },
      "purpose": {
        "description": "Purpose combined with CODE defines a unique set of aliases.",
        "type": "string"
      },
      "putCall": {
        "description": "Aladdin's internal embedded option flag. Flag is used to determine the types of embedded options associated with a security. From the Put/Call/Sink picklist on main panel in SecurityMaster. Short value appears in XML; longer value on the picklist. e.g. Cin the XML, CALL in the picklist, means the option to buy back the bond. Please see PC_TYPES and LOAN_PC_TYPES decodes for full list of short and long values.",
        "type": "string"
      },
      "putMandatory": {
        "description": "Yes/No flag to designate if the embedded put option is mandatory. Values include 'Y', 'N'.",
        "type": "string"
      },
      "putType": {
        "description": "Put option type. Values include: 'A' American, 'B' Bermudan, 'E' European, 'S' Asian. Full list of valid values are in the CALL_PUT_TYPE decode.",
        "type": "string",
        "x-enum-column": "code",
        "x-enum-source": "CALL_PUT_TYPE"
      },
      "ratchetCoeffcntType": {
        "description": "Coefficient Type Code",
        "type": "string"
      },
      "ratchetCoeffcntValue": {
        "description": "Coefficient Value",
        "format": "float",
        "type": "number"
      },
      "ratingApplication": {
        "description": "Name of the application name that modified the rating.",
        "type": "string"
      },
      "ratingSource": {
        "description": "Source of the rating.  This is a single character code that can be decoded to a human readable source name via the decode REMIT_SOURCE.  Sample decoded values are Moody, SNP, Fitch, Manual, etc.",
        "type": "string"
      },
      "ratingTrigg1": {
        "description": "Rating Trigger Rating 1",
        "type": "string"
      },
      "ratingTrigg2": {
        "description": "Rating Trigger Rating 2",
        "type": "string"
      },
      "ratingTrigg3": {
        "description": "Rating Trigger Rating 3",
        "type": "string"
      },
      "ratingTriggSrc1": {
        "description": "Rating Trigger Agency 1",
        "type": "string"
      },
      "ratingTriggSrc2": {
        "description": "Rating Trigger Agency 2",
        "type": "string"
      },
      "ratingTriggSrc3": {
        "description": "Rating Trigger Agency 3",
        "type": "string"
      },
      "ratio": {
        "description": "The amount of the underlying asset that the investor will receive per par amount at conversion. Conversion Ratio = Par Amount/Conversion Price",
        "format": "float",
        "type": "number"
      },
      "ratioRangeLower": {
        "description": "The price and ratio range columns will be populated when the conversion price and ratio are variable. They describe the minimum and maximum thresholds of the range (price and ratio) when the conversion terms are variable. The minimum amount of shares, determined by the px_range_upper",
        "format": "float",
        "type": "number"
      },
      "ratioRangeUpper": {
        "description": "The price and ratio range columns will be populated when the conversion price and ratio are variable. They describe the minimum and maximum thresholds of the range (price and ratio) when the conversion terms are variable. The minimum amount of shares, determined by the px_range_lower",
        "format": "float",
        "type": "number"
      },
      "recNotional": {
        "description": "The notional amount on which the RECEIVE leg payments are based. Used primarily for Currency Swaps and Zero Coupon Interest Rate Swaps.",
        "format": "float",
        "type": "number"
      },
      "recUpfrontPmt": {
        "description": "Amount that the receive leg will have to pay in order to receive the cashflows from the receive leg.",
        "format": "float",
        "type": "number"
      },
      "redFreq": {
        "description": "The frequency of redemptions for this fund. Values are displayed as numbers and indicate the amount of times per year the the redemptions will occur. For example, 1 means ANNUALLY, 365 means DAILY. The list of valid values can be found in the PERIODICITYdecode.",
        "format": "int32",
        "type": "integer"
      },
      "redemptDaysVal": {
        "description": "Price Averaging Days",
        "format": "int32",
        "type": "integer"
      },
      "redemptDelayDaysCd": {
        "description": "Price Delay Days Code",
        "type": "string"
      },
      "redemptDelayVal": {
        "description": "Price Delay Days",
        "format": "int32",
        "type": "integer"
      },
      "redemptFactor": {
        "description": "Redemption Calculation Factor",
        "format": "float",
        "type": "number"
      },
      "redemptPriceCd": {
        "description": "Redemption Price Code",
        "type": "string"
      },
      "redemptTypeCd": {
        "description": "Redemption Type",
        "type": "string"
      },
      "redemptionMethod": {
        "description": "Specifies how the bond will be called (e.g.: partly, whole, both, not applicable). The redemption methods are maintained in CONVERT_REDEEM",
        "type": "string"
      },
      "redemptionPrice": {
        "description": "Price at which the bond will be redeemed, expressed as a percent",
        "format": "float",
        "type": "number"
      },
      "redemptionValue": {
        "description": "The redemption value of the asset at maturity. The value represents a percentage the holder is entitled to upon payment of principal. Expressed as a percentage of par.",
        "format": "float",
        "type": "number"
      },
      "referenceEntity": {
        "description": "The reference entity bears the credit risk of the contract, and can be a corporation,\ngovernment or other legal entity that issues debt of any kind. If a credit event such as a default occurs\nand the reference entity is unable to satisfy the conditions of the bond, the buyer of the credit default\nswaps receives payment from the seller.",
        "type": "string"
      },
      "referenceEntityType": {
        "description": "The CDS issuer type of the REFERENCE_ENTITY. Values include I (Index), S (Sovereign), C (Corporate)",
        "type": "string"
      },
      "referencePrice": {
        "description": "Price used to determine recovery value of a swap.",
        "format": "float",
        "type": "number"
      },
      "referenceType": {
        "description": "Indicates the type of identifier used for the reference obligation, e.g. CUSIP, ISIN, etc. Valid values can be found in the SM2_ALIAS decode.",
        "type": "string"
      },
      "remarketingFee": {
        "description": "Fee paid to the remarketing agent, expressed as a percent. For example, 10 basis points is recorded as 0.10. This is applied to the Floater Orig Face. Aladdin can then subtract the fee from each coupon payment (under development).",
        "format": "float",
        "type": "number"
      },
      "requestedBy": {
        "description": "Aladdin login ID of the individual who entered the new issue initially",
        "type": "string"
      },
      "reremic": {
        "description": "Yes/No flag to designate if the security is a RE-REMIC. Values include 'Y' and 'N'. Null values should be considered the equivalent of 'N'.",
        "type": "string"
      },
      "resetAdjust": {
        "description": "Controls the business adjustment method when the RESET_DELAY is applied and resulting rate is not a business day. The valid list of values can be found in the ADJUST_METH decode.",
        "type": "string"
      },
      "resetCal": {
        "description": "Calendar used to determine holidays for coupon reset computations. \"&\" indicates \"and.\" \"|\" indicates \"or.\" LIBOR floaters usually use NY_Bank|LN. Calendars can be single (e.g. NY_Bank) or combined. Full list of calendars is in the RESET_CALENDAR decode.",
        "type": "string"
      },
      "resetDelay": {
        "description": "Delay in calendar or business days following the Nominal Reset date,  based on the reset frequency.",
        "format": "int32",
        "type": "integer"
      },
      "resetDelayConv": {
        "description": "Defines business or calendar convention for the RESET_DELAY. The valid list of values can be found in the LOOKBACK_CONV decode.",
        "type": "string"
      },
      "resetFreq": {
        "description": "Please use instead the RESET_FREQ_DTL tag.  RESET_FREQ is a less-granular version of RESET_FREQ_DTL, therefore it adds no value compared to RESET_FREQ_DTL.",
        "type": "string"
      },
      "resetFreqDtl": {
        "description": "Coupon reset frequency, e.g. w=Weekly, m=Monthly, y=Annually, B = every N business days, etc.  Full list of valid values for RESET_FREQ_DTL is in the RESET_TYPE decode list, which drives the 'Reset Freq Type' dropdown in SecurityMaster floater panel. Note: If the RESET_FREQ_DTL means 'Nth day', 'Nth week,' etc., then the value of 'N' is found in the RESET_TERM tag.",
        "type": "string"
      },
      "resetIndex": {
        "description": "For swaptions, a specific index to which the coupon resets on the underlying swap.",
        "type": "string"
      },
      "resetTerm": {
        "description": "Used in combination with the RESET_FREQ tag when a security resets every certain number of calendar days (e.g. for a security to reset every 35 calendar days, RESET_FREQ = 'E' and RESET_TERM = 35).",
        "format": "int32",
        "type": "integer"
      },
      "restructSupplement": {
        "description": "Restructuring represents a specific type of credit event and refers to a change in the agreement between the reference entity and the holders of an obligation due to the deterioration in creditworthiness or financial condition of the reference entity.",
        "type": "string"
      },
      "reviewedBy": {
        "description": "Login ID of the person or program that 'reviewed' the security master or issuer record. If this is null, the security or issuer is not reviewed. If anything is contained in this field, the security is reviewed.",
        "type": "string"
      },
      "riskCountry": {
        "description": "A subjective field that is meant to override the country field when the risk of the security differs from where it is issued. For example, a US branch of a Swiss bank would have the country as US, and the Risk Country as Switzerland, where the ultimate credit risk lies. If Risk Country is blank, this field will fall back to the Asset’s Country.",
        "type": "string"
      },
      "roundFlag": {
        "description": "Flag to designate if the security payment factors are rounded or truncated. Values include: 'R', 'T'.",
        "type": "string"
      },
      "roundPrecision": {
        "description": "Precision to which security payment factors are to be rounded or truncated based upon the ROUND_FLAG.",
        "format": "int32",
        "type": "integer"
      },
      "salIndustry": {
        "description": "Salomon industry code.  E.g.  CONG =INDU IMAN CONG Conglomerate/Diversified Mfg,  CONS = INDU ICON CONS  Consumer Products,  CSTR =INDU IMAN CSTR  Construction Business, etc. Full list of valid values is in the B_INDUSTRY decode.",
        "type": "string"
      },
      "secDesc2": {
        "description": "Security desciption \"part 2\". Some asset classes use this to provide other information about the security",
        "type": "string"
      },
      "secGroup": {
        "description": "The Aladdin® security group",
        "type": "string"
      },
      "secTicker": {
        "description": "Security ticker. For equities, this is the stock ticker. For CMOs/ABS and CMBS this represents a concatenation of deal and tranche. For municipal and corporate bonds, the ticker represents the standard issuer ticker. For FUTUREs, this contains the standard exchange ticker. Ticker allows users to quickly look up security information through external data providers.e.g., tickers should be provide for futures (TYH6), options on futures (TYH6C, TYH6P), equities (IBM), etc.",
        "type": "string"
      },
      "secType": {
        "description": "SEC_TYPE is a legacy tag. Most clients disregard SEC_TYPE since its components are available in the SM_SEC_GROUP and SM_SEC_TYPE tags.This is either the concatenation of Aladdin security group + '_' + Aladdin security type (e.g. security group of 'BND' and security type of 'AGENCY' becomes 'BND_AGENCY') or a result of the 'decoding' of that security group/security type, dependent on the client system's 'decode list' for SMD_SEC_TYPE.Example:  Aladdin Security group of 'BND' and Aladdin security type of 'AGENCY' becomes SEC_TYPE='BND_AGENCY' in the interface if there is no 'decode value' for this in the SMD_SEC_TYPE decode list.If there is a 'decode value' for this in the SMD_SEC_TYPE decode list (for example BND_AGENCY maps to 'ABOND'), then the 'decoded' value is sent (in this example, SEC_TYPE='ABOND' is sent.)",
        "type": "string"
      },
      "sectorCode": {
        "description": "The value for this issuer or security's sector_type. E.g. => If the sector_type='GICS,' then the sectorCode will contain the GICS Code. If the TYPE = 'MSCI_SECTOR', then the sectorCode will contain that sector. Some sectorCodes may be further described by decodes. The usual name of the decode list is the sector_type itself. e.g. the decode list for GICS is called GICS. There may also be a second-level decode. Take the TYPE (e.g. GICS) and look for it in the SM_SECT_SET_MAP decode or the SM_SC_SET_MAP decode. There you may fine another decode name, e.g. GICS_DESC. GICS_DESC contains a description of each sectorCode, e.g. '55105010 Independent Power Producers & Energy Traders'",
        "type": "string"
      },
      "sectorLevel": {
        "description": "Sector level.",
        "type": "integer"
      },
      "sectorSource": {
        "description": "This field describes the source of the sector information. It identifies if the values were received from a provider, entered manually, or derived. Valid values include 'P', 'M' and 'D' and can be found in the SECTOR_SOURCE decode.",
        "type": "string",
        "x-nicknames": "source"
      },
      "sectorType": {
        "description": "Sector type. For securities, this appears in the Credit Main panel, 'Additional Classifications' section, in the 'Type' column. For issuers, this appears in the Credit Main panel, 'Industry Classifications' section, in the 'Issuer Sector Type' column. Sector TYPEs are decoded by the SM_SECTOR_SET decode, e.g. ISS_ML means 'Merrill Lynch Issuer Industry Classification'",
        "type": "string"
      },
      "securityId": {
        "description": "Aladdin's internal security ID. This may be a real CUSIP or an Aladdin-generated dummy value. Aladdin dummy conventions include: - B Cusips (start with letter B, incremented, no meaning); - S Cusips are sometimes used for securities with SEDOLs: S plus SEDOL plus check-digit). - Futures Cusips use ticker plus maturity year plus check digit, e.g. TYH320039",
        "type": "string"
      },
      "seqNum": {
        "description": "Sequence number of the notes.  Used to order the notes.",
        "format": "int32",
        "type": "integer"
      },
      "setPeriodEndDt": {
        "description": "Setting period end date",
        "format": "date-time",
        "type": "string"
      },
      "setPeriodStartDt": {
        "description": "Setting period start date",
        "format": "date-time",
        "type": "string"
      },
      "settleCal": {
        "description": "The calendar that is used in determining the security?s settlement. This tag references the decode table RESET_CALENDAR",
        "type": "string"
      },
      "settleCashDelayCd": {
        "description": "Cash Delay Days",
        "format": "int32",
        "type": "integer"
      },
      "settleCurrOptionCode": {
        "description": "Specifies the conditions under which the non-face settlement currency rather than the principle bond currency will be used.(Required for threshold reporting)",
        "type": "string"
      },
      "settleDays": {
        "description": "For BND/GOVT: Stores Standard Settlement Days. When left blank, Aladdin will compute the settlement date on new trades using its existing logic driven by the security group / security type. When populated, this new field in SecurityMaster will override the standard calculation by using the data in SecurityMaster instead.",
        "type": "number"
      },
      "settleDelayCd": {
        "description": "Consideration Settlement Delay Code",
        "type": "string"
      },
      "settleDelayDayCombo": {
        "description": "Combination Delay Days",
        "format": "int32",
        "type": "integer"
      },
      "settleLocation": {
        "description": "Primary location where the trade settles. Locations include: 'C' Cedel, 'D' DTC, 'E' Euroclear, 'F' Fedwire, 'P' Physical,  'T' PTC, 'N' Non-deliverable Forward (NDF), and 'O' On-shore Hedge Agreements (OHA).  For full list of valid values, see the SETTLE_LOC and SETTLE_METHOD decodes for securities trades and FX trades respectively.",
        "type": "string"
      },
      "settleMethod": {
        "description": "The delivery method for this type of option. For OPTION/EQUITY you can have P=Physical, C=Cash, N=Net Shares, O=Other (full list in the EQOPT_SETTLE decode).  For OPTION/FUTURE you can have M=MARGIN, U=UPFRONT  (full list in the OPT_FUT_SETTLE decode).",
        "type": "string"
      },
      "settlePeriod": {
        "description": "Number of days representing settlement from delivery of the debt instrument to the receipt of the underlying asset",
        "format": "int32",
        "type": "integer"
      },
      "settlePeriodConv": {
        "description": "The day convention associated with a conversion's settlement period. B = Business days, C = Calendar Days. Day conventions are maintained in CALENDAR_TYPE",
        "type": "string"
      },
      "settleSharesDelayDay": {
        "description": "Share Delay Days",
        "format": "int32",
        "type": "integer"
      },
      "shortfallId": {
        "description": "When the leverage of the TOB structure (underlying face/residual amount issued) is high, typically the Shortfall ID is attached in the panel.",
        "type": "string"
      },
      "shrDeliveryCode": {
        "description": "Code indicating if the shares delivered on conversion are existing, new or both.(Required for threshold reporting, currently stored in a sec_custom field)",
        "type": "string"
      },
      "shrSettleFactor": {
        "description": "Factor applied to the number of shares received - usually 1",
        "format": "float",
        "type": "number"
      },
      "sinkDate": {
        "description": "Expected date of Sink for  a given bond (YYYY-MM-DD)",
        "format": "date",
        "type": "string"
      },
      "sinkFundMethod": {
        "description": "The sinking fund method is a code identifying the method by which the mandatory sinking fund retirements are made.  Valid values are:\nA - Lottery: Bonds are selected by the trustee at random and called to fulfill the retirement\nB - Pro-rata: Bonds are called by retiring an equal amount from each owner based on the percentage of bonds held\nN - No indication in official statement\nIt is available in the Schedules > Put Call tab in SecurityMaster.",
        "type": "string"
      },
      "sinkMandatory": {
        "description": "Yes/No flag to designate if the sinking schedule is mandatory. Values include 'Y', 'N'.",
        "type": "string"
      },
      "sinkType": {
        "description": "Type of sink, either Amortizing, Paydown, or Redemption.\nFor Redemption securities, sink payments are captured by corporate action transactions regardless of factor.\nFor Amortizing or Paydown securities, Aladdin deems the security as 'factorable.' Factorable securities (which includes MBS, ABS, etc.) capture sink payments by factors, regardless of the sinking fund schedule. At maturity, a position in a factorable security will have a maturity transaction posted for it only when the final factor has arrived (factor of 0.0), regardless of maturity date.\nThis maturity process accomplishes two goals:\n•\tThe maturity transaction will be posted with the correct final paydown amount.\n•\tIt synchronizes the maturity transaction posting with final paydown cashflow thereby keeping cash balances consistent with current known paydowns.\nP=Paydown (it sinks by a factor), R=Redemption (a corporate-action trade is entered for the sink amount), A=Amortizing (it sinks by a factor), D=Percent of UPB. Full list of valid values is in the SINK_TYPES decode.",
        "type": "string"
      },
      "speedMeasure": {
        "description": "PSA, CPR, ABS, MHP, SMM, etc",
        "type": "string"
      },
      "spread": {
        "description": "The amount in percentage points over the index value at which the coupon will be set. For example, if the security floats 150 bps over LIBOR, enter 1.50.",
        "format": "double",
        "type": "number"
      },
      "standardContract": {
        "description": "The market standard this CDS contract follows. Valid values are in the CDS_STANDARD decode. In the decode definitions, 'Standard North American Corp' is a set of conventions. 'Old Style' refers to the set of conventions that prevailed before the StandardNorth American Corp conventions. The '2009 Supplement' refers to a set of contractual requirements which can apply to Standard North American Corp conventions or Old Style conventions. Null is not in the decode but is a valid value and means 'Old Style -Adhering to 2009 Supplement'",
        "type": "string"
      },
      "startDate": {
        "description": "Start date of this record. (YYYY-MM-DD)",
        "format": "date",
        "type": "string"
      },
      "startDt": {
        "description": "Start date.",
        "format": "date",
        "type": "string"
      },
      "state": {
        "description": "Two character state abbreviation. Valid values are the usual 50 US states, plus some additional values like PR for Puerto Rico, MU for Multi State, YF for New York/New Jersey, etc. See the B_STATES decode for full list of valid values.",
        "type": "string"
      },
      "stockBuybackProtection": {
        "description": "Type of protection available to either the issuer or investor if the stock is bought back (e.g.: no effect, investor will receive shares, issuer may suspend rights). The buyback protection types are maintained in CONVERT_BUYBACK",
        "type": "string"
      },
      "stopDate": {
        "description": "Stop date when independent amount stops being effective. There can be only one STOP_DATE per CUSIP; STOP_DATE must be unique.",
        "format": "date-time",
        "type": "string"
      },
      "stopDateSmVectorData": {
        "description": "The ending date of the attribute",
        "format": "date",
        "type": "string"
      },
      "strike": {
        "description": "Strike rate or price of the option",
        "format": "float",
        "type": "number"
      },
      "strikeCap": {
        "description": "Interest rate of the fixed leg of the underlying interest rate swap",
        "format": "float",
        "type": "number"
      },
      "strikeType": {
        "description": "Indicates if the strip type of a bond is Coupon (C) or Principal (P).",
        "type": "string"
      },
      "structure": {
        "description": "Bond structure (e.g. '10/1'). The values in this tag are displayed already decoded from the SMD_STRUCT decode. This field means different things for different security types. For synthetic securities it denotes the length of the security's life. However, for cash securities this field denotes any special features such as multi-modal status, etc. Or The calculation method for the floating rate formula. Most common is \"m*ind+s\" which stands for multiplier * index + spread.",
        "type": "string"
      },
      "stubType": {
        "description": "The stub provisions of the swap leg. The list of valid values can be found in the PMT_STUB_TYPE decode",
        "type": "string"
      },
      "subCusip": {
        "description": "The CUSIP of the referenced 'component' security.  Component securities are related to a 'parent' security. Examples are  tracers, trains, and credit default swaps list their 'Attached CUSIPs' in this field. Also, when many mortgage pools are aggregated to make a mega pool or when a swap's notional balance is defined by a list of mortgages.",
        "type": "string"
      },
      "subFreq": {
        "description": "The frequency of subscriptions for this fund. Values are displayed as numbers and indicate the amount of times per year the the subscriptions will occur. For example, 1 means ANNUALLY, 365 means DAILY. The list of valid values can be found in the PERIODICITY decode.",
        "format": "int32",
        "type": "integer"
      },
      "subscriptionDeadline": {
        "description": "Date/Time after which no new orders can be entered",
        "type": "string"
      },
      "suspensionDayConv": {
        "description": "Suspension day convention. Designates if the suspension days are business or calendar. Possible values include 'Business', 'Calendar' or 'Monthly'",
        "type": "string"
      },
      "suspensionDays": {
        "description": "The number of suspension days.",
        "format": "int32",
        "type": "integer"
      },
      "taxStatus": {
        "description": "Tax status at issuance. Different status types include: 'A' Tax Advantaged, 'F' Federally Tax Exempt, 'S' State Tax Exempt, 'T' Taxable, 'X' Both Federal and State Tax Exempt. Tax Advantaged may apply to some preferred securities that have a tax advantage but are not completely tax free.",
        "type": "string"
      },
      "tbaCusip8": {
        "description": "TBA_CUSIP8 is being deprecated in favor of the ASSET_BENCHMARK field on security master.  Clients should use ASSET_BENCHMARK because it is visible on the SecurityMaster GUI, it has all 9 characters, and will be enhanced to support new TBA product types in the future. TBA_CUSIP8 is not editable, does not have the check digit, and will not be enhanced for new product types. TBA_CUSIP9 is provided the trade and position files, is the same as ASSET_BENCHMARK, and will be supported.",
        "type": "string"
      },
      "tbaEligible": {
        "description": "Applicable for MBS pools, the value of this tag is 'Y' if the pool meets good delivery guidelines for TBA delivery.  Otherwise, the value is 'N'.",
        "type": "string"
      },
      "thresholdLogicCode": {
        "description": "Code representing how the four types of thresholds are used in combination",
        "type": "string"
      },
      "thresholdPeriodCode": {
        "description": "The period during which the threshold is measured.",
        "type": "string"
      },
      "tickSize": {
        "description": "Deprecated. Please see TICK_VALUE.",
        "format": "float",
        "type": "number"
      },
      "tickValue": {
        "description": "The cash value of one tick. TICK_VALUE divided by CONTRACT_SIZE can be used to derive the tick size.",
        "format": "float",
        "type": "number"
      },
      "tickerPfx": {
        "description": "Aladdin supports only one ticker prefix per future across all markets. But in reality, the same ticker prefix may be used more than once for different futures in different markets. For example, the ticker ES is used for both S&P500 EMINI in the XIOM market, and EURO$ SFR 3MO in the XLIF market. Aladdin then makes up a TICKER_PFX for one of them and records the correct market prefix for both records in CONTRACT_TICKER_PFX.",
        "type": "string"
      },
      "tier": {
        "description": "The pricing level of a mortgage loan. 1 is the lowest, 4 is the highest",
        "type": "string"
      },
      "tranche": {
        "description": "The class of security in a CMO offering.  e.g. 1A1",
        "type": "string"
      },
      "trusteeFee": {
        "description": "Fee paid to the trustee, expressed as a percent. For example, 1.5 basis points is recorded as 0.015. This is applied to the Underlying Face. Aladdin can then subtract the fee from each coupon payment (under development).",
        "format": "float",
        "type": "number"
      },
      "type": {
        "description": "Put/call type as shown in the Put/Call field for each row in the put/call schedule in SecurityMaster.. E.g. C=Call Schedule, P=Put Schedule, S=Sink, Y=Prepay Penalty, R=Refunded, c=Called, Z=Extraordinary Redemption. Full list of valid values is in the PUT_CALL_SINK decode.",
        "type": "string"
      },
      "typeCode": {
        "description": "The ratchet type code",
        "type": "string"
      },
      "underlyingCusip": {
        "description": "Underlying security associated with the option. For swaptions, UNDERLYING_CUSIP can be either:  (1) a generalized vanilla swap with no link to a swap in Aladdin (e.g. SWAP1YR, SWAP5YR, etc.; these are from the SWAPTION_ID decode list), or (2) the BCUSIP of an existing, custom swap that is set up in Aladdin (e.g. BOA123456).",
        "type": "string"
      },
      "underlyingFace": {
        "description": "Face amount of the underlying bonds deposited to the trust.",
        "format": "float",
        "type": "number"
      },
      "underlyingId": {
        "description": "Security ID of the underlying bond of the tender option bond trust. If there are two or more underlying bonds, then each underlying bond will associate with one BND/RES. So enter the Security ID of the underlying bond for this particular BND/RES.",
        "type": "string"
      },
      "underlyingInterest": {
        "description": "Accrued interest amount on the underlying bond as of the trust original's settlement date. This number is published when the BND/RES is issued because the Underlying Interest is not due to the trust holders.",
        "format": "float",
        "type": "number"
      },
      "underlyingValueType": {
        "description": "Meaning of underlying level/price.  E.g. when underlying is a bond, performance can be calculated from clean or dirty prices. The list of valid values can be found in the PRICE_TYPE decode.",
        "type": "string"
      },
      "underwritingGross": {
        "description": "Fee underwriters receive for underwriting a deal in spread terms",
        "format": "double",
        "type": "number"
      },
      "units": {
        "description": "Units of the security",
        "type": "string"
      },
      "unrealisedChange": {
        "description": "The percent change in the current conversion terms currently unrealised. This is usually up to the value contained in convert_div_protect.min_change",
        "format": "float",
        "type": "number"
      },
      "unrealisedEffectiveDt": {
        "description": "The date from which the unrealised conversion terms are effective",
        "format": "date-time",
        "type": "string"
      },
      "unrealisedPrice": {
        "description": "The effective conversion price that incorporates the unrealised change, plus any appropriate rounding rules",
        "format": "float",
        "type": "number"
      },
      "unrealisedRatio": {
        "description": "The effective conversion ratio that incorporates the unrealised change, plus any appropriate rounding rules",
        "format": "float",
        "type": "number"
      },
      "useOfProceeds": {
        "description": "Sector type data. Examples include 'Single-family housing', 'Student loans', 'Hospitals'. The extract contains the decoded description from the USE_OF_PROCEEDS decode table.",
        "type": "string"
      },
      "userId": {
        "description": "BRS internal field.  User ID.",
        "type": "string"
      },
      "wiFlag": {
        "description": "When-issued flag. Y means it is when-issued. N, space, and null mean it is not.",
        "type": "string"
      },
      "yieldMaintRate": {
        "description": "The interest rate of the U.S. Treasury Security used to calculate the Yield Maintenance Prepayment Premium due if a borrower voluntarily prepays a mortgage loan, as specified in the related mortgage note.",
        "format": "float",
        "type": "number"
      },
      "yldThreshold": {
        "description": "The annualized yield threshold.",
        "format": "float",
        "type": "number"
      },
      "zipCode": {
        "description": "The zip code in which the property is located.",
        "type": "string"
      }
    }
  }
}